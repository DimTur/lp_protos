syntax = "proto3";

package lp.v1;

option go_package = "lp.lp.v1;lp1";

service LearningPlatform {
    rpc CreateChannel (CreateChannelRequest) returns (CreateChannelResponse);
    rpc GetChannel (GetChannelRequest) returns (GetChannelResponse);
    rpc GetChannels (GetChannelsRequest) returns (GetChannelsResponse);
    rpc UpdateChannel (UpdateChannelRequest) returns (UpdateChannelResponse);
    rpc DeleteChannel (DeleteChannelRequest) returns (DeleteChannelResponse);
    rpc ShareChannelToGroup (ShareChannelToGroupRequest) returns (ShareChannelToGroupResponse);
    rpc IsChannelCreator (IsChannelCreatorRequest) returns (IsChannelCreatorResponse);
    rpc GetLearningGroupsShareWithChannel (GetLearningGroupsShareWithChannelRequest) returns (GetLearningGroupsShareWithChannelResponse);

    rpc CreatePlan (CreatePlanRequest) returns (CreatePlanResponse);
    rpc GetPlan (GetPlanRequest) returns (GetPlanResponse);
    rpc GetPlans (GetPlansRequest) returns (GetPlansResponse);
    rpc UpdatePlan (UpdatePlanRequest) returns (UpdatePlanResponse);
    rpc DeletePlan (DeletePlanRequest) returns (DeletePlanResponse);
    rpc SharePlanWithUsers (SharePlanWithUsersRequest) returns (SharePlanWithUsersResponse);
    rpc IsUserShareWithPlan (IsUserShareWithPlanRequest) returns (IsUserShareWithPlanResponse);

    rpc CreateLesson (CreateLessonRequest) returns (CreateLessonResponse);
    rpc GetLesson (GetLessonRequest) returns (GetLessonResponse);
    rpc GetLessons (GetLessonsRequest) returns (GetLessonsResponse);
    rpc UpdateLesson (UpdateLessonRequest) returns (UpdateLessonResponse);
    rpc DeleteLesson (DeleteLessonRequest) returns (DeleteLessonResponse);

    rpc CreateImagePage (CreateImagePageRequest) returns (CreateImagePageResponse);
    rpc CreatePDFPage (CreatePDFPageRequest) returns (CreatePDFPageResponse);
    rpc CreateVideoPage (CreateVideoPageRequest) returns (CreateVideoPageResponse);
    rpc GetImagePage (GetImagePageRequest) returns (GetImagePageResponse);
    rpc GetVideoPage (GetVideoPageRequest) returns (GetVideoPageResponse);
    rpc GetPDFPage (GetPDFPageRequest) returns (GetPDFPageResponse);
    rpc GetPages (GetPagesRequest) returns (GetPagesResponse);
    rpc UpdateImagePage (UpdateImagePageRequest) returns (UpdateImagePageResponse);
    rpc UpdatePDFPage (UpdatePDFPageRequest) returns (UpdatePDFPageResponse);
    rpc UpdateVideoPage (UpdateVideoPageRequest) returns (UpdateVideoPageResponse);
    rpc DeletePage (DeletePageRequest) returns (DeletePageResponse);

    rpc CreateQuestionPage (CreateQuestionPageRequest) returns (CreateQuestionPageResponse);
    rpc GetQuestionPage (GetQuestionPageRequest) returns (GetQuestionPageResponse);
    rpc UpdateQuestionPage (UpdateQuestionPageRequest) returns (UpdateQuestionPageResponse);

    rpc TryLesson (TryLessonRequest) returns (TryLessonResponse);
    rpc UpdatePageAttempt (UpdatePageAttemptRequest) returns (UpdatePageAttemptResponse);
    rpc CompleteLesson (CompleteLessonRequest) returns (CompleteLessonResponse);
    rpc GetLessonAttempts (GetLessonAttemptsRequest) returns (GetLessonAttemptsResponse);
}

message GetLessonAttemptsRequest {
    string user_id = 1;
    int64 lesson_id = 2;
    int64 limit = 3; // Limit for pagination.
    int64 offset = 4; // Offset for pagination.
}

message LessonAttempt {
    int64 id = 1;
    int64 lesson_id = 2;
    int64 plan_id = 3;
    int64 channel_id = 4;
    string start_time = 5;
    string end_time = 6;
    string user_id = 7;
    string last_modified_by = 8;
    bool is_complete = 9;
    bool is_successful = 10;
    int64 percentage_score = 11;
}

message GetLessonAttemptsResponse {
    repeated LessonAttempt lesson_attempts = 1;
}

message TryLessonRequest {
    string user_id = 1;
    int64 lesson_id = 2;
    int64 plan_id = 3;
    int64 channel_id =4;
}

message QuestionPageAttempt {
    int64 id = 1;
    int64 page_id = 2;
    int64 lesson_attempt_id = 3;
    bool is_correct = 4;
    Answer user_answer = 5;
}

message TryLessonResponse {
    repeated QuestionPageAttempt question_page_attempts = 1;
}

message UpdatePageAttemptRequest {
    int64 question_attempt_id = 1;
    int64 page_id = 2;
    int64 lesson_attempt_id = 3;
    Answer user_answer = 4;
}

message UpdatePageAttemptResponse {
    bool success = 1;
}

message CompleteLessonRequest {
    string user_id = 1;
    int64 lesson_attempt_id = 2;
}

message CompleteLessonResponse {
    int64 lesson_attempt_id = 1;
    bool is_successfull = 2;
    int64 percentage_score = 3;
}

enum ContentType {
    CONTENT_TYPE_UNSPECIFIED = 0;
    IMAGE = 1;
    VIDEO = 2;
    PDF = 3;
    QUESTION = 4;
}

message BasePage {
    int64 id = 1;
    int64 lesson_id = 2;
    string created_by = 3;
    string last_modified_by = 4;
    string created_at = 5;
    string modified = 6;
    ContentType content_type = 7;
}

message CreateBasePage {
    int64 lesson_id = 1;
    string created_by = 2;
}

message UpdateBasePage {
    int64 id = 1;
    string last_modified_by = 2;
}

message CreateImagePageRequest {
    CreateBasePage base = 1;
    string image_file_url = 2;
    string image_name = 3;
}

message CreateImagePageResponse {
    int64 id = 1;
}

message CreatePDFPageRequest {
    CreateBasePage base = 1;
    string pdf_file_url = 2;
    string pdf_name = 3;
}

message CreatePDFPageResponse {
    int64 id = 1;
}

message CreateVideoPageRequest {
    CreateBasePage base = 1;
    string video_file_url = 2;
    string video_name = 3;
}

message CreateVideoPageResponse {
    int64 id = 1;
}

message GetImagePageRequest {
    int64 page_id = 1;
    int64 lesson_id = 2;
}

message GetImagePageResponse {
    BasePage base = 1;
    string image_file_url = 2;
    string image_name = 3;
}

message GetVideoPageRequest {
    int64 page_id = 1;
    int64 lesson_id = 2;
}

message GetVideoPageResponse {
    BasePage base = 1;
    string video_file_url = 2;
    string video_name = 3;
}

message GetPDFPageRequest {
    int64 page_id = 1;
    int64 lesson_id = 2;
}

message GetPDFPageResponse {
    BasePage base = 1;
    string pdf_file_url = 2;
    string pdf_name = 3;
}

message UpdateImagePageRequest {
    UpdateBasePage base = 1;
    string image_file_url = 2;
    string image_name = 3;
}

message UpdateImagePageResponse {
    int64 id = 1;
}

message UpdatePDFPageRequest {
    UpdateBasePage base = 1;
    string pdf_file_url = 2;
    string pdf_name = 3;
}

message UpdatePDFPageResponse {
    int64 id = 1;
}

message UpdateVideoPageRequest {
    UpdateBasePage base = 1;
    string video_file_url = 2;
    string video_name = 3;
}

message UpdateVideoPageResponse {
    int64 id = 1;
}

message GetPagesRequest {
    int64 lesson_id = 1; // ID of the lesson that includes the pages.
    int64 limit = 2; // Limit for pagination.
    int64 offset = 3; // Offset for pagination.
}

message GetPagesResponse {
    repeated BasePage pages = 1; // The retrieved list of pages in the lesson.
}

message DeletePageRequest {
    int64 page_id = 1;
    int64 lesson_id = 2;
}

message DeletePageResponse {
    bool success = 1; // Indicates if the page was successfully deleted.
}

message IsUserShareWithPlanRequest {
    string user_id = 1;
    int64 plan_id = 2;
}

message IsUserShareWithPlanResponse {
    bool is_share = 1;
}


message GetLearningGroupsShareWithChannelRequest {
    int64 channel_id = 1; 
}

message GetLearningGroupsShareWithChannelResponse {
    repeated string learning_group_ids = 1;
}


message IsChannelCreatorRequest {
    string user_id = 1;
    int64 channel_id = 2;
}

message IsChannelCreatorResponse {
    bool is_creator = 1;
}

message Channel {
    int64 id = 1; // ID of the channel.
    string name = 2; // Name of the channel.
    string description = 3; // Description of the channel.
    string created_by = 4; // User ID who creates the channel.
    string last_modified_by = 5; // ID of the user who modified the channel.
    string created_at = 6; // Timestamp when the channel was created.
    string modified = 7; // Timestamp when the channel was last modified.
}

message ChannelWithPlans {
    int64 id = 1; // ID of the channel.
    string name = 2; // Name of the channel.
    string description = 3; // Description of the channel.
    string created_by = 4; // User ID who creates the channel.
    string last_modified_by = 5; // ID of the user who modified the channel.
    string created_at = 6; // Timestamp when the channel was created.
    string modified = 7; // Timestamp when the channel was last modified.
    repeated Plan plans = 8;
}

message CreateChannelRequest {
    string name = 1; // Name of the channel.
    string description = 2; // Description of the channel.
    string created_by = 3; // User ID who creates the channel.
    string last_modified_by = 4; // ID of the user who modified the channel.
    string learning_group_id = 5;
}

message CreateChannelResponse {
    int64 id = 1; // ID of the new channel.
}

message GetChannelRequest {
    int64 channel_id = 1; // ID of the channel to retrieve.
}

message GetChannelResponse {
    ChannelWithPlans channel = 1; // The retrieved channel.
}

message GetChannelsRequest {
    repeated string learning_group_ids = 1;
    int64 limit = 2; // Limit for pagination.
    int64 offset = 3; // Offset for pagination.
}

message GetChannelsResponse {
    repeated Channel channels = 1; // The retrieved list of channels.
}

message UpdateChannelRequest {
    string user_id = 1; // ID of the user who modified the channel.
    int64 channel_id = 2; // ID of the channel.
    optional string name = 3; // Name of the channel.
    optional string description = 4; // Description of the channel.
}

message UpdateChannelResponse {
    int64 id = 1; // ID of the updated channel .
}

message DeleteChannelRequest {
    int64 channel_id = 1; // ID of the channel to delete.
}

message DeleteChannelResponse {
    bool success = 1; // Indicates if the channel was successfully deleted.
}

message ShareChannelToGroupRequest {
    int64 channel_id = 1;
    repeated string lgroups_ids = 2;
    string created_by = 3;
}

message ShareChannelToGroupResponse {
    bool success = 1; // Indicates if the channel was successfully shared.
}

message Plan {
    int64 id = 1; // ID of the plan.
    string name = 2; // Name of the plan.
    string description = 3; // Description of the plan.
    string created_by = 4; // User ID who creates the plan.
    string last_modified_by = 5; // ID of the user who modified the plan.
    bool is_published = 6; //
    bool public = 7; // 
    string created_at = 8; // Timestamp when the plan was created.
    string modified = 9; // Timestamp when the plan was last modified.
}

message CreatePlanRequest {
    string name = 1; // Name of the plan.
    string description = 2; // Description of the plan.
    string created_by = 3; // User ID who creates the plan.
    int64 channel_id = 4; // Сhannel ID within which the plan is created.
}

message CreatePlanResponse {
    int64 id = 1; // ID of the new plan.
}

message GetPlanRequest {
    int64 channel_id = 1; // ID of the channel that includes the plans.
    int64 plan_id = 2; // ID of the plan to retrieve.
}

message GetPlanResponse {
    Plan plan = 1; // The retrieved plan.
}

message GetPlansRequest {
    string user_id = 1;
    int64 channel_id = 2; // ID of the channel that includes the plans.
    int64 limit = 3; // Limit for pagination.
    int64 offset = 4; // Offset for pagination.
}

message GetPlansResponse {
    repeated Plan plans = 1; // The retrieved list of plan.
}

message UpdatePlanRequest {
    int64 channel_id = 1; // ID of the channel that includes the plans.
    int64 plan_id = 2; // ID of the plan to retrieve.
    optional string name = 3; // Name of the plan.
    optional string description = 4; // Description of the plan.
    string last_modified_by = 5; // ID of the user who modified the plan.
    optional bool is_published = 6; // Has the plan been published.
    optional bool public = 7; // Is the plan public.
}

message UpdatePlanResponse {
    int64 id = 1; // ID of the updated plan.
}

message DeletePlanRequest {
    int64 channel_id = 1; // ID of the channel that includes the plans.
    int64 plan_id = 2; // ID of the plan to retrieve.
}

message DeletePlanResponse {
    bool success = 1; // Indicates if the plan was successfully deleted.
}

message SharePlanWithUsersRequest {
    int64 channel_id = 1; // ID of the channel that includes the plans.
    int64 plan_id = 2; // ID of the plan to retrieve.
    repeated string users_ids = 3;
    string created_by = 4;
}

message SharePlanWithUsersResponse {
    bool success = 1; // Indicates if the plan was successfully shared.
}

message Lesson {
    int64 id = 1; // ID of the lesson.
    string name = 2; // Name of the lesson.
    string description = 3; // Description of the lesson.
    string created_by = 4; // User ID who creates the lesson.
    string last_modified_by = 5; // ID of the user who modified the lesson.
    string created_at = 6; // Timestamp when the lesson was created.
    string modified = 7; // Timestamp when the lesson was last modified.
}

message CreateLessonRequest {
    string name = 1; // Name of the lesson.
    string description = 2; // Description of the lesson.
    string created_by = 3; // User ID who creates the lesson.
    string last_modified_by = 4; // ID of the user who modified the lesson.
    int64 plan_id = 5; // Plan ID within which the lesson is created.
}

message CreateLessonResponse {
    int64 id = 1; // ID of the new lesson.
}

message GetLessonRequest {
    int64 lesson_id = 1; // ID of the lesson to retrieve.
    int64 plan_id = 2; // Plan ID within which the lesson is created.
}

message GetLessonResponse {
    Lesson lesson = 1; // The retrieved lesson.
}

message GetLessonsRequest {
    int64 plan_id = 1; // ID of the plan that includes the lesson.
    int64 limit = 2; // Limit for pagination.
    int64 offset = 3; // Offset for pagination.
}

message GetLessonsResponse {
    repeated Lesson lessons = 1; // The retrieved list of lesson.
}

message UpdateLessonRequest {
    int64 plan_id = 1; // ID of the plan that includes the lesson.
    int64 lesson_id = 2; // ID of the lesson.
    string name = 3; // Name of the lesson.
    string description = 4; // Description of the lesson.
    string last_modified_by = 5; // ID of the user who modified the lesson.
}

message UpdateLessonResponse {
    int64 id = 1; // ID of the new lesson.
}

message DeleteLessonRequest {
    int64 lesson_id = 1; // ID of the lesson to delete.
    int64 plan_id = 2; // Plan ID within which the lesson is created.
}

message DeleteLessonResponse {
    bool success = 1; // Indicates if the lesson was successfully deleted.
}

enum QuestionType {
    QUESTION_TYPE_UNSPECIFIED = 0;
    MULTICHOICE = 1;
}

enum Answer {
    ANSWER_UNSPECIFIED = 0;
    OPTION_A = 1;
    OPTION_B = 2;
    OPTION_C = 3;
    OPTION_D = 4;
    OPTION_E = 5;
}

message QuestionPage {
    int64 id = 1; // ID of the page.
    int64 lesson_id = 2; // Lesson ID within which the page is created.
    string created_by = 3; // User ID who creates the page.
    string last_modified_by = 4; // ID of the user who modified the page.
    string created_at = 5; // Timestamp when the page was created.
    string modified = 6; // Timestamp when the page was last modified.
    ContentType content_type = 7; // Сontent type of page
    QuestionType question_type = 8; // Question type for question
    string question = 9; // Question.
    string option_a = 10; // Option answer.
    string option_b = 11; // Option answer.
    string option_c = 12; // Option answer.
    string option_d = 13; // Option answer.
    string option_e = 14; // Option answer.
    string answer = 15; // Answer for question.
}

message CreateQuestionPageRequest {
    int64 lesson_id = 1; // Lesson ID within which the page is created.
    string created_by = 2; // User ID who creates the lesson.
    string last_modified_by = 3; // ID of the user who modified the page.
    string question = 6; // Question.
    string option_a = 7; // Option answer.
    string option_b = 8; // Option answer.
    optional string option_c = 9; // Option answer.
    optional string option_d = 10; // Option answer.
    optional string option_e = 11; // Option answer.
    Answer answer = 12; // Answer for question.
}

message CreateQuestionPageResponse {
    int64 id = 1; // ID of the new question page.
}

message GetQuestionPageRequest {
    int64 page_id = 1;
    int64 lesson_id = 2;
}

message GetQuestionPageResponse {
    QuestionPage question_page = 1; // The retrieved question page.
}

message UpdateQuestionPageRequest {
    int64 id = 1; // ID of the lesson.
    string last_modified_by = 2; // ID of the user who modified the lesson.
    optional string question = 3;
    optional string option_a = 4;
    optional string option_b = 5;
    optional string option_c = 6;
    optional string option_d = 7;
    optional string option_e = 8;
    optional Answer answer = 9;
}

message UpdateQuestionPageResponse {
    int64 id = 1; // ID of the updated pdf page.
}
