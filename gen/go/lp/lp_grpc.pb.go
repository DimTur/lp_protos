// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: lp.proto

package lp1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningPlatform_CreateChannel_FullMethodName       = "/lp.v1.LearningPlatform/CreateChannel"
	LearningPlatform_GetChannel_FullMethodName          = "/lp.v1.LearningPlatform/GetChannel"
	LearningPlatform_GetChannels_FullMethodName         = "/lp.v1.LearningPlatform/GetChannels"
	LearningPlatform_UpdateChannel_FullMethodName       = "/lp.v1.LearningPlatform/UpdateChannel"
	LearningPlatform_DeleteChannel_FullMethodName       = "/lp.v1.LearningPlatform/DeleteChannel"
	LearningPlatform_ShareChannelToGroup_FullMethodName = "/lp.v1.LearningPlatform/ShareChannelToGroup"
	LearningPlatform_IsChannelCreator_FullMethodName    = "/lp.v1.LearningPlatform/IsChannelCreator"
	LearningPlatform_CreatePlan_FullMethodName          = "/lp.v1.LearningPlatform/CreatePlan"
	LearningPlatform_GetPlan_FullMethodName             = "/lp.v1.LearningPlatform/GetPlan"
	LearningPlatform_GetPlans_FullMethodName            = "/lp.v1.LearningPlatform/GetPlans"
	LearningPlatform_UpdatePlan_FullMethodName          = "/lp.v1.LearningPlatform/UpdatePlan"
	LearningPlatform_DeletePlan_FullMethodName          = "/lp.v1.LearningPlatform/DeletePlan"
	LearningPlatform_SharePlanWithUsers_FullMethodName  = "/lp.v1.LearningPlatform/SharePlanWithUsers"
	LearningPlatform_CreateLesson_FullMethodName        = "/lp.v1.LearningPlatform/CreateLesson"
	LearningPlatform_GetLesson_FullMethodName           = "/lp.v1.LearningPlatform/GetLesson"
	LearningPlatform_GetLessons_FullMethodName          = "/lp.v1.LearningPlatform/GetLessons"
	LearningPlatform_UpdateLesson_FullMethodName        = "/lp.v1.LearningPlatform/UpdateLesson"
	LearningPlatform_DeleteLesson_FullMethodName        = "/lp.v1.LearningPlatform/DeleteLesson"
	LearningPlatform_CreatePage_FullMethodName          = "/lp.v1.LearningPlatform/CreatePage"
	LearningPlatform_GetPage_FullMethodName             = "/lp.v1.LearningPlatform/GetPage"
	LearningPlatform_GetPages_FullMethodName            = "/lp.v1.LearningPlatform/GetPages"
	LearningPlatform_UpdatePage_FullMethodName          = "/lp.v1.LearningPlatform/UpdatePage"
	LearningPlatform_DeletePage_FullMethodName          = "/lp.v1.LearningPlatform/DeletePage"
	LearningPlatform_CreateQuestionPage_FullMethodName  = "/lp.v1.LearningPlatform/CreateQuestionPage"
	LearningPlatform_GetQuestionPage_FullMethodName     = "/lp.v1.LearningPlatform/GetQuestionPage"
	LearningPlatform_UpdateQuestionPage_FullMethodName  = "/lp.v1.LearningPlatform/UpdateQuestionPage"
	LearningPlatform_CreateAttempt_FullMethodName       = "/lp.v1.LearningPlatform/CreateAttempt"
)

// LearningPlatformClient is the client API for LearningPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningPlatformClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
	ShareChannelToGroup(ctx context.Context, in *ShareChannelToGroupRequest, opts ...grpc.CallOption) (*ShareChannelToGroupResponse, error)
	IsChannelCreator(ctx context.Context, in *IsChannelCreatorRequest, opts ...grpc.CallOption) (*IsChannelCreatorResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error)
	GetPlans(ctx context.Context, in *GetPlansRequest, opts ...grpc.CallOption) (*GetPlansResponse, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	SharePlanWithUsers(ctx context.Context, in *SharePlanWithUsersRequest, opts ...grpc.CallOption) (*SharePlanWithUsersResponse, error)
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error)
	GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonResponse, error)
	GetLessons(ctx context.Context, in *GetLessonsRequest, opts ...grpc.CallOption) (*GetLessonsResponse, error)
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error)
	DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*DeleteLessonResponse, error)
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error)
	GetPages(ctx context.Context, in *GetPagesRequest, opts ...grpc.CallOption) (*GetPagesResponse, error)
	UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error)
	DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error)
	CreateQuestionPage(ctx context.Context, in *CreateQuestionPageRequest, opts ...grpc.CallOption) (*CreateQuestionPageResponse, error)
	GetQuestionPage(ctx context.Context, in *GetQuestionPageRequest, opts ...grpc.CallOption) (*GetQuestionPageResponse, error)
	UpdateQuestionPage(ctx context.Context, in *UpdateQuestionPageRequest, opts ...grpc.CallOption) (*UpdateQuestionPageResponse, error)
	CreateAttempt(ctx context.Context, in *CreateAttemptRequest, opts ...grpc.CallOption) (*CreateAttemptResponse, error)
}

type learningPlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningPlatformClient(cc grpc.ClientConnInterface) LearningPlatformClient {
	return &learningPlatformClient{cc}
}

func (c *learningPlatformClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelsResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_UpdateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) ShareChannelToGroup(ctx context.Context, in *ShareChannelToGroupRequest, opts ...grpc.CallOption) (*ShareChannelToGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareChannelToGroupResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_ShareChannelToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) IsChannelCreator(ctx context.Context, in *IsChannelCreatorRequest, opts ...grpc.CallOption) (*IsChannelCreatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsChannelCreatorResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_IsChannelCreator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlanResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlanResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetPlans(ctx context.Context, in *GetPlansRequest, opts ...grpc.CallOption) (*GetPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlansResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlanResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_UpdatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_DeletePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) SharePlanWithUsers(ctx context.Context, in *SharePlanWithUsersRequest, opts ...grpc.CallOption) (*SharePlanWithUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharePlanWithUsersResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_SharePlanWithUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLessonResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLessonResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetLessons(ctx context.Context, in *GetLessonsRequest, opts ...grpc.CallOption) (*GetLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLessonsResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLessonResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_UpdateLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*DeleteLessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLessonResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_DeleteLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetPages(ctx context.Context, in *GetPagesRequest, opts ...grpc.CallOption) (*GetPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPagesResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_UpdatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_DeletePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) CreateQuestionPage(ctx context.Context, in *CreateQuestionPageRequest, opts ...grpc.CallOption) (*CreateQuestionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionPageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreateQuestionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) GetQuestionPage(ctx context.Context, in *GetQuestionPageRequest, opts ...grpc.CallOption) (*GetQuestionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionPageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_GetQuestionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) UpdateQuestionPage(ctx context.Context, in *UpdateQuestionPageRequest, opts ...grpc.CallOption) (*UpdateQuestionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionPageResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_UpdateQuestionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningPlatformClient) CreateAttempt(ctx context.Context, in *CreateAttemptRequest, opts ...grpc.CallOption) (*CreateAttemptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAttemptResponse)
	err := c.cc.Invoke(ctx, LearningPlatform_CreateAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningPlatformServer is the server API for LearningPlatform service.
// All implementations must embed UnimplementedLearningPlatformServer
// for forward compatibility.
type LearningPlatformServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	ShareChannelToGroup(context.Context, *ShareChannelToGroupRequest) (*ShareChannelToGroupResponse, error)
	IsChannelCreator(context.Context, *IsChannelCreatorRequest) (*IsChannelCreatorResponse, error)
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error)
	GetPlans(context.Context, *GetPlansRequest) (*GetPlansResponse, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	SharePlanWithUsers(context.Context, *SharePlanWithUsersRequest) (*SharePlanWithUsersResponse, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error)
	GetLesson(context.Context, *GetLessonRequest) (*GetLessonResponse, error)
	GetLessons(context.Context, *GetLessonsRequest) (*GetLessonsResponse, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error)
	DeleteLesson(context.Context, *DeleteLessonRequest) (*DeleteLessonResponse, error)
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error)
	GetPages(context.Context, *GetPagesRequest) (*GetPagesResponse, error)
	UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error)
	DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error)
	CreateQuestionPage(context.Context, *CreateQuestionPageRequest) (*CreateQuestionPageResponse, error)
	GetQuestionPage(context.Context, *GetQuestionPageRequest) (*GetQuestionPageResponse, error)
	UpdateQuestionPage(context.Context, *UpdateQuestionPageRequest) (*UpdateQuestionPageResponse, error)
	CreateAttempt(context.Context, *CreateAttemptRequest) (*CreateAttemptResponse, error)
	mustEmbedUnimplementedLearningPlatformServer()
}

// UnimplementedLearningPlatformServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningPlatformServer struct{}

func (UnimplementedLearningPlatformServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedLearningPlatformServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedLearningPlatformServer) GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedLearningPlatformServer) UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedLearningPlatformServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedLearningPlatformServer) ShareChannelToGroup(context.Context, *ShareChannelToGroupRequest) (*ShareChannelToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareChannelToGroup not implemented")
}
func (UnimplementedLearningPlatformServer) IsChannelCreator(context.Context, *IsChannelCreatorRequest) (*IsChannelCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChannelCreator not implemented")
}
func (UnimplementedLearningPlatformServer) CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedLearningPlatformServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedLearningPlatformServer) GetPlans(context.Context, *GetPlansRequest) (*GetPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlans not implemented")
}
func (UnimplementedLearningPlatformServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedLearningPlatformServer) DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (UnimplementedLearningPlatformServer) SharePlanWithUsers(context.Context, *SharePlanWithUsersRequest) (*SharePlanWithUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePlanWithUsers not implemented")
}
func (UnimplementedLearningPlatformServer) CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLearningPlatformServer) GetLesson(context.Context, *GetLessonRequest) (*GetLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedLearningPlatformServer) GetLessons(context.Context, *GetLessonsRequest) (*GetLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessons not implemented")
}
func (UnimplementedLearningPlatformServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedLearningPlatformServer) DeleteLesson(context.Context, *DeleteLessonRequest) (*DeleteLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedLearningPlatformServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedLearningPlatformServer) GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedLearningPlatformServer) GetPages(context.Context, *GetPagesRequest) (*GetPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPages not implemented")
}
func (UnimplementedLearningPlatformServer) UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedLearningPlatformServer) DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedLearningPlatformServer) CreateQuestionPage(context.Context, *CreateQuestionPageRequest) (*CreateQuestionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionPage not implemented")
}
func (UnimplementedLearningPlatformServer) GetQuestionPage(context.Context, *GetQuestionPageRequest) (*GetQuestionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionPage not implemented")
}
func (UnimplementedLearningPlatformServer) UpdateQuestionPage(context.Context, *UpdateQuestionPageRequest) (*UpdateQuestionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionPage not implemented")
}
func (UnimplementedLearningPlatformServer) CreateAttempt(context.Context, *CreateAttemptRequest) (*CreateAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttempt not implemented")
}
func (UnimplementedLearningPlatformServer) mustEmbedUnimplementedLearningPlatformServer() {}
func (UnimplementedLearningPlatformServer) testEmbeddedByValue()                          {}

// UnsafeLearningPlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningPlatformServer will
// result in compilation errors.
type UnsafeLearningPlatformServer interface {
	mustEmbedUnimplementedLearningPlatformServer()
}

func RegisterLearningPlatformServer(s grpc.ServiceRegistrar, srv LearningPlatformServer) {
	// If the following call pancis, it indicates UnimplementedLearningPlatformServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningPlatform_ServiceDesc, srv)
}

func _LearningPlatform_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetChannels(ctx, req.(*GetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_ShareChannelToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareChannelToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).ShareChannelToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_ShareChannelToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).ShareChannelToGroup(ctx, req.(*ShareChannelToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_IsChannelCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsChannelCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).IsChannelCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_IsChannelCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).IsChannelCreator(ctx, req.(*IsChannelCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetPlans(ctx, req.(*GetPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_DeletePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_SharePlanWithUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharePlanWithUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).SharePlanWithUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_SharePlanWithUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).SharePlanWithUsers(ctx, req.(*SharePlanWithUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetLesson(ctx, req.(*GetLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetLessons(ctx, req.(*GetLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_UpdateLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_DeleteLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).DeleteLesson(ctx, req.(*DeleteLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetPages(ctx, req.(*GetPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).UpdatePage(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).DeletePage(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_CreateQuestionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreateQuestionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreateQuestionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreateQuestionPage(ctx, req.(*CreateQuestionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_GetQuestionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).GetQuestionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_GetQuestionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).GetQuestionPage(ctx, req.(*GetQuestionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_UpdateQuestionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).UpdateQuestionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_UpdateQuestionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).UpdateQuestionPage(ctx, req.(*UpdateQuestionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningPlatform_CreateAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningPlatformServer).CreateAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningPlatform_CreateAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningPlatformServer).CreateAttempt(ctx, req.(*CreateAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningPlatform_ServiceDesc is the grpc.ServiceDesc for LearningPlatform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningPlatform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lp.v1.LearningPlatform",
	HandlerType: (*LearningPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _LearningPlatform_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _LearningPlatform_GetChannel_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _LearningPlatform_GetChannels_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _LearningPlatform_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _LearningPlatform_DeleteChannel_Handler,
		},
		{
			MethodName: "ShareChannelToGroup",
			Handler:    _LearningPlatform_ShareChannelToGroup_Handler,
		},
		{
			MethodName: "IsChannelCreator",
			Handler:    _LearningPlatform_IsChannelCreator_Handler,
		},
		{
			MethodName: "CreatePlan",
			Handler:    _LearningPlatform_CreatePlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _LearningPlatform_GetPlan_Handler,
		},
		{
			MethodName: "GetPlans",
			Handler:    _LearningPlatform_GetPlans_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _LearningPlatform_UpdatePlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _LearningPlatform_DeletePlan_Handler,
		},
		{
			MethodName: "SharePlanWithUsers",
			Handler:    _LearningPlatform_SharePlanWithUsers_Handler,
		},
		{
			MethodName: "CreateLesson",
			Handler:    _LearningPlatform_CreateLesson_Handler,
		},
		{
			MethodName: "GetLesson",
			Handler:    _LearningPlatform_GetLesson_Handler,
		},
		{
			MethodName: "GetLessons",
			Handler:    _LearningPlatform_GetLessons_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _LearningPlatform_UpdateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _LearningPlatform_DeleteLesson_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _LearningPlatform_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _LearningPlatform_GetPage_Handler,
		},
		{
			MethodName: "GetPages",
			Handler:    _LearningPlatform_GetPages_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _LearningPlatform_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _LearningPlatform_DeletePage_Handler,
		},
		{
			MethodName: "CreateQuestionPage",
			Handler:    _LearningPlatform_CreateQuestionPage_Handler,
		},
		{
			MethodName: "GetQuestionPage",
			Handler:    _LearningPlatform_GetQuestionPage_Handler,
		},
		{
			MethodName: "UpdateQuestionPage",
			Handler:    _LearningPlatform_UpdateQuestionPage_Handler,
		},
		{
			MethodName: "CreateAttempt",
			Handler:    _LearningPlatform_CreateAttempt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lp.proto",
}
