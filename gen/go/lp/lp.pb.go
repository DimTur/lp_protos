// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: lp.proto

package lp1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNSPECIFIED ContentType = 0
	ContentType_IMAGE                    ContentType = 1
	ContentType_VIDEO                    ContentType = 2
	ContentType_PDF                      ContentType = 3
	ContentType_QUESTION                 ContentType = 4
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNSPECIFIED",
		1: "IMAGE",
		2: "VIDEO",
		3: "PDF",
		4: "QUESTION",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNSPECIFIED": 0,
		"IMAGE":                    1,
		"VIDEO":                    2,
		"PDF":                      3,
		"QUESTION":                 4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_lp_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_lp_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{0}
}

type QuestionType int32

const (
	QuestionType_QUESTION_TYPE_UNSPECIFIED QuestionType = 0
	QuestionType_MULTICHOICE               QuestionType = 1
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "QUESTION_TYPE_UNSPECIFIED",
		1: "MULTICHOICE",
	}
	QuestionType_value = map[string]int32{
		"QUESTION_TYPE_UNSPECIFIED": 0,
		"MULTICHOICE":               1,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_lp_proto_enumTypes[1].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_lp_proto_enumTypes[1]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{1}
}

type Answer int32

const (
	Answer_ANSWER_UNSPECIFIED Answer = 0
	Answer_OPTION_A           Answer = 1
	Answer_OPTION_B           Answer = 2
	Answer_OPTION_C           Answer = 3
	Answer_OPTION_D           Answer = 4
	Answer_OPTION_E           Answer = 5
)

// Enum value maps for Answer.
var (
	Answer_name = map[int32]string{
		0: "ANSWER_UNSPECIFIED",
		1: "OPTION_A",
		2: "OPTION_B",
		3: "OPTION_C",
		4: "OPTION_D",
		5: "OPTION_E",
	}
	Answer_value = map[string]int32{
		"ANSWER_UNSPECIFIED": 0,
		"OPTION_A":           1,
		"OPTION_B":           2,
		"OPTION_C":           3,
		"OPTION_D":           4,
		"OPTION_E":           5,
	}
)

func (x Answer) Enum() *Answer {
	p := new(Answer)
	*p = x
	return p
}

func (x Answer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Answer) Descriptor() protoreflect.EnumDescriptor {
	return file_lp_proto_enumTypes[2].Descriptor()
}

func (Answer) Type() protoreflect.EnumType {
	return &file_lp_proto_enumTypes[2]
}

func (x Answer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Answer.Descriptor instead.
func (Answer) EnumDescriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{2}
}

type IsUserShareWithPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId int64  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *IsUserShareWithPlanRequest) Reset() {
	*x = IsUserShareWithPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserShareWithPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserShareWithPlanRequest) ProtoMessage() {}

func (x *IsUserShareWithPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserShareWithPlanRequest.ProtoReflect.Descriptor instead.
func (*IsUserShareWithPlanRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{0}
}

func (x *IsUserShareWithPlanRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IsUserShareWithPlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type IsUserShareWithPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsShare bool `protobuf:"varint,1,opt,name=is_share,json=isShare,proto3" json:"is_share,omitempty"`
}

func (x *IsUserShareWithPlanResponse) Reset() {
	*x = IsUserShareWithPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserShareWithPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserShareWithPlanResponse) ProtoMessage() {}

func (x *IsUserShareWithPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserShareWithPlanResponse.ProtoReflect.Descriptor instead.
func (*IsUserShareWithPlanResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{1}
}

func (x *IsUserShareWithPlanResponse) GetIsShare() bool {
	if x != nil {
		return x.IsShare
	}
	return false
}

type GetLearningGroupsShareWithChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *GetLearningGroupsShareWithChannelRequest) Reset() {
	*x = GetLearningGroupsShareWithChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLearningGroupsShareWithChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLearningGroupsShareWithChannelRequest) ProtoMessage() {}

func (x *GetLearningGroupsShareWithChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLearningGroupsShareWithChannelRequest.ProtoReflect.Descriptor instead.
func (*GetLearningGroupsShareWithChannelRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{2}
}

func (x *GetLearningGroupsShareWithChannelRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type GetLearningGroupsShareWithChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningGroupIds []string `protobuf:"bytes,1,rep,name=learning_group_ids,json=learningGroupIds,proto3" json:"learning_group_ids,omitempty"`
}

func (x *GetLearningGroupsShareWithChannelResponse) Reset() {
	*x = GetLearningGroupsShareWithChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLearningGroupsShareWithChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLearningGroupsShareWithChannelResponse) ProtoMessage() {}

func (x *GetLearningGroupsShareWithChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLearningGroupsShareWithChannelResponse.ProtoReflect.Descriptor instead.
func (*GetLearningGroupsShareWithChannelResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{3}
}

func (x *GetLearningGroupsShareWithChannelResponse) GetLearningGroupIds() []string {
	if x != nil {
		return x.LearningGroupIds
	}
	return nil
}

type IsChannelCreatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int64  `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *IsChannelCreatorRequest) Reset() {
	*x = IsChannelCreatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsChannelCreatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsChannelCreatorRequest) ProtoMessage() {}

func (x *IsChannelCreatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsChannelCreatorRequest.ProtoReflect.Descriptor instead.
func (*IsChannelCreatorRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{4}
}

func (x *IsChannelCreatorRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IsChannelCreatorRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type IsChannelCreatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCreator bool `protobuf:"varint,1,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
}

func (x *IsChannelCreatorResponse) Reset() {
	*x = IsChannelCreatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsChannelCreatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsChannelCreatorResponse) ProtoMessage() {}

func (x *IsChannelCreatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsChannelCreatorResponse.ProtoReflect.Descriptor instead.
func (*IsChannelCreatorResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{5}
}

func (x *IsChannelCreatorResponse) GetIsCreator() bool {
	if x != nil {
		return x.IsCreator
	}
	return false
}

type BasePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LessonId       int64       `protobuf:"varint,2,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	CreatedBy      string      `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModifiedBy string      `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
	CreatedAt      string      `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Modified       string      `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`
	ContentType    ContentType `protobuf:"varint,7,opt,name=content_type,json=contentType,proto3,enum=lp.v1.ContentType" json:"content_type,omitempty"`
}

func (x *BasePage) Reset() {
	*x = BasePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePage) ProtoMessage() {}

func (x *BasePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePage.ProtoReflect.Descriptor instead.
func (*BasePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{6}
}

func (x *BasePage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BasePage) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *BasePage) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *BasePage) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *BasePage) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BasePage) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *BasePage) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_UNSPECIFIED
}

type CreateBasePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId       int64  `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	CreatedBy      string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastModifiedBy string `protobuf:"bytes,3,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
}

func (x *CreateBasePage) Reset() {
	*x = CreateBasePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBasePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBasePage) ProtoMessage() {}

func (x *CreateBasePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBasePage.ProtoReflect.Descriptor instead.
func (*CreateBasePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{7}
}

func (x *CreateBasePage) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *CreateBasePage) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateBasePage) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

type UpdateBasePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LastModifiedBy string `protobuf:"bytes,2,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`
}

func (x *UpdateBasePage) Reset() {
	*x = UpdateBasePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasePage) ProtoMessage() {}

func (x *UpdateBasePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasePage.ProtoReflect.Descriptor instead.
func (*UpdateBasePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBasePage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBasePage) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

type ImagePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ImageFileUrl string    `protobuf:"bytes,2,opt,name=image_file_url,json=imageFileUrl,proto3" json:"image_file_url,omitempty"`
	ImageName    string    `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
}

func (x *ImagePage) Reset() {
	*x = ImagePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePage) ProtoMessage() {}

func (x *ImagePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePage.ProtoReflect.Descriptor instead.
func (*ImagePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{9}
}

func (x *ImagePage) GetBase() *BasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ImagePage) GetImageFileUrl() string {
	if x != nil {
		return x.ImageFileUrl
	}
	return ""
}

func (x *ImagePage) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type CreateImagePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *CreateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ImageFileUrl string          `protobuf:"bytes,2,opt,name=image_file_url,json=imageFileUrl,proto3" json:"image_file_url,omitempty"`
	ImageName    string          `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
}

func (x *CreateImagePage) Reset() {
	*x = CreateImagePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImagePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImagePage) ProtoMessage() {}

func (x *CreateImagePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImagePage.ProtoReflect.Descriptor instead.
func (*CreateImagePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{10}
}

func (x *CreateImagePage) GetBase() *CreateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreateImagePage) GetImageFileUrl() string {
	if x != nil {
		return x.ImageFileUrl
	}
	return ""
}

func (x *CreateImagePage) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type UpdateImagePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *UpdateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ImageFileUrl string          `protobuf:"bytes,2,opt,name=image_file_url,json=imageFileUrl,proto3" json:"image_file_url,omitempty"`
	ImageName    string          `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
}

func (x *UpdateImagePage) Reset() {
	*x = UpdateImagePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImagePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImagePage) ProtoMessage() {}

func (x *UpdateImagePage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImagePage.ProtoReflect.Descriptor instead.
func (*UpdateImagePage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateImagePage) GetBase() *UpdateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateImagePage) GetImageFileUrl() string {
	if x != nil {
		return x.ImageFileUrl
	}
	return ""
}

func (x *UpdateImagePage) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type VideoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *BasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	VideoFileUrl string    `protobuf:"bytes,2,opt,name=video_file_url,json=videoFileUrl,proto3" json:"video_file_url,omitempty"`
	VideoName    string    `protobuf:"bytes,3,opt,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
}

func (x *VideoPage) Reset() {
	*x = VideoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPage) ProtoMessage() {}

func (x *VideoPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPage.ProtoReflect.Descriptor instead.
func (*VideoPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{12}
}

func (x *VideoPage) GetBase() *BasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *VideoPage) GetVideoFileUrl() string {
	if x != nil {
		return x.VideoFileUrl
	}
	return ""
}

func (x *VideoPage) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

type CreateVideoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *CreateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	VideoFileUrl string          `protobuf:"bytes,2,opt,name=video_file_url,json=videoFileUrl,proto3" json:"video_file_url,omitempty"`
	VideoName    string          `protobuf:"bytes,3,opt,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
}

func (x *CreateVideoPage) Reset() {
	*x = CreateVideoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoPage) ProtoMessage() {}

func (x *CreateVideoPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoPage.ProtoReflect.Descriptor instead.
func (*CreateVideoPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{13}
}

func (x *CreateVideoPage) GetBase() *CreateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreateVideoPage) GetVideoFileUrl() string {
	if x != nil {
		return x.VideoFileUrl
	}
	return ""
}

func (x *CreateVideoPage) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

type UpdateVideoPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *UpdateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	VideoFileUrl string          `protobuf:"bytes,2,opt,name=video_file_url,json=videoFileUrl,proto3" json:"video_file_url,omitempty"`
	VideoName    string          `protobuf:"bytes,3,opt,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
}

func (x *UpdateVideoPage) Reset() {
	*x = UpdateVideoPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoPage) ProtoMessage() {}

func (x *UpdateVideoPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoPage.ProtoReflect.Descriptor instead.
func (*UpdateVideoPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateVideoPage) GetBase() *UpdateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateVideoPage) GetVideoFileUrl() string {
	if x != nil {
		return x.VideoFileUrl
	}
	return ""
}

func (x *UpdateVideoPage) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

type PDFPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *BasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PdfFileUrl string    `protobuf:"bytes,2,opt,name=pdf_file_url,json=pdfFileUrl,proto3" json:"pdf_file_url,omitempty"`
	PdfName    string    `protobuf:"bytes,3,opt,name=pdf_name,json=pdfName,proto3" json:"pdf_name,omitempty"`
}

func (x *PDFPage) Reset() {
	*x = PDFPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PDFPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFPage) ProtoMessage() {}

func (x *PDFPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFPage.ProtoReflect.Descriptor instead.
func (*PDFPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{15}
}

func (x *PDFPage) GetBase() *BasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *PDFPage) GetPdfFileUrl() string {
	if x != nil {
		return x.PdfFileUrl
	}
	return ""
}

func (x *PDFPage) GetPdfName() string {
	if x != nil {
		return x.PdfName
	}
	return ""
}

type CreatePDFPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *CreateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PdfFileUrl string          `protobuf:"bytes,2,opt,name=pdf_file_url,json=pdfFileUrl,proto3" json:"pdf_file_url,omitempty"`
	PdfName    string          `protobuf:"bytes,3,opt,name=pdf_name,json=pdfName,proto3" json:"pdf_name,omitempty"`
}

func (x *CreatePDFPage) Reset() {
	*x = CreatePDFPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePDFPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePDFPage) ProtoMessage() {}

func (x *CreatePDFPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePDFPage.ProtoReflect.Descriptor instead.
func (*CreatePDFPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{16}
}

func (x *CreatePDFPage) GetBase() *CreateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CreatePDFPage) GetPdfFileUrl() string {
	if x != nil {
		return x.PdfFileUrl
	}
	return ""
}

func (x *CreatePDFPage) GetPdfName() string {
	if x != nil {
		return x.PdfName
	}
	return ""
}

type UpdatePDFPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *UpdateBasePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PdfFileUrl string          `protobuf:"bytes,2,opt,name=pdf_file_url,json=pdfFileUrl,proto3" json:"pdf_file_url,omitempty"`
	PdfName    string          `protobuf:"bytes,3,opt,name=pdf_name,json=pdfName,proto3" json:"pdf_name,omitempty"`
}

func (x *UpdatePDFPage) Reset() {
	*x = UpdatePDFPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePDFPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePDFPage) ProtoMessage() {}

func (x *UpdatePDFPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePDFPage.ProtoReflect.Descriptor instead.
func (*UpdatePDFPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatePDFPage) GetBase() *UpdateBasePage {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdatePDFPage) GetPdfFileUrl() string {
	if x != nil {
		return x.PdfFileUrl
	}
	return ""
}

func (x *UpdatePDFPage) GetPdfName() string {
	if x != nil {
		return x.PdfName
	}
	return ""
}

type CreatePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Page:
	//
	//	*CreatePageRequest_ImagePage
	//	*CreatePageRequest_VideoPage
	//	*CreatePageRequest_PdfPage
	Page isCreatePageRequest_Page `protobuf_oneof:"page"`
}

func (x *CreatePageRequest) Reset() {
	*x = CreatePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePageRequest) ProtoMessage() {}

func (x *CreatePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePageRequest.ProtoReflect.Descriptor instead.
func (*CreatePageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{18}
}

func (m *CreatePageRequest) GetPage() isCreatePageRequest_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (x *CreatePageRequest) GetImagePage() *CreateImagePage {
	if x, ok := x.GetPage().(*CreatePageRequest_ImagePage); ok {
		return x.ImagePage
	}
	return nil
}

func (x *CreatePageRequest) GetVideoPage() *CreateVideoPage {
	if x, ok := x.GetPage().(*CreatePageRequest_VideoPage); ok {
		return x.VideoPage
	}
	return nil
}

func (x *CreatePageRequest) GetPdfPage() *CreatePDFPage {
	if x, ok := x.GetPage().(*CreatePageRequest_PdfPage); ok {
		return x.PdfPage
	}
	return nil
}

type isCreatePageRequest_Page interface {
	isCreatePageRequest_Page()
}

type CreatePageRequest_ImagePage struct {
	ImagePage *CreateImagePage `protobuf:"bytes,1,opt,name=image_page,json=imagePage,proto3,oneof"`
}

type CreatePageRequest_VideoPage struct {
	VideoPage *CreateVideoPage `protobuf:"bytes,2,opt,name=video_page,json=videoPage,proto3,oneof"`
}

type CreatePageRequest_PdfPage struct {
	PdfPage *CreatePDFPage `protobuf:"bytes,3,opt,name=pdf_page,json=pdfPage,proto3,oneof"`
}

func (*CreatePageRequest_ImagePage) isCreatePageRequest_Page() {}

func (*CreatePageRequest_VideoPage) isCreatePageRequest_Page() {}

func (*CreatePageRequest_PdfPage) isCreatePageRequest_Page() {}

type CreatePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePageResponse) Reset() {
	*x = CreatePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePageResponse) ProtoMessage() {}

func (x *CreatePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePageResponse.ProtoReflect.Descriptor instead.
func (*CreatePageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContentType ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,proto3,enum=lp.v1.ContentType" json:"content_type,omitempty"`
}

func (x *GetPageRequest) Reset() {
	*x = GetPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageRequest) ProtoMessage() {}

func (x *GetPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageRequest.ProtoReflect.Descriptor instead.
func (*GetPageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{20}
}

func (x *GetPageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPageRequest) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_UNSPECIFIED
}

type GetPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Page:
	//
	//	*GetPageResponse_ImagePage
	//	*GetPageResponse_VideoPage
	//	*GetPageResponse_PdfPage
	Page isGetPageResponse_Page `protobuf_oneof:"page"`
}

func (x *GetPageResponse) Reset() {
	*x = GetPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPageResponse) ProtoMessage() {}

func (x *GetPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPageResponse.ProtoReflect.Descriptor instead.
func (*GetPageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{21}
}

func (m *GetPageResponse) GetPage() isGetPageResponse_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (x *GetPageResponse) GetImagePage() *ImagePage {
	if x, ok := x.GetPage().(*GetPageResponse_ImagePage); ok {
		return x.ImagePage
	}
	return nil
}

func (x *GetPageResponse) GetVideoPage() *VideoPage {
	if x, ok := x.GetPage().(*GetPageResponse_VideoPage); ok {
		return x.VideoPage
	}
	return nil
}

func (x *GetPageResponse) GetPdfPage() *PDFPage {
	if x, ok := x.GetPage().(*GetPageResponse_PdfPage); ok {
		return x.PdfPage
	}
	return nil
}

type isGetPageResponse_Page interface {
	isGetPageResponse_Page()
}

type GetPageResponse_ImagePage struct {
	ImagePage *ImagePage `protobuf:"bytes,1,opt,name=image_page,json=imagePage,proto3,oneof"`
}

type GetPageResponse_VideoPage struct {
	VideoPage *VideoPage `protobuf:"bytes,2,opt,name=video_page,json=videoPage,proto3,oneof"`
}

type GetPageResponse_PdfPage struct {
	PdfPage *PDFPage `protobuf:"bytes,3,opt,name=pdf_page,json=pdfPage,proto3,oneof"`
}

func (*GetPageResponse_ImagePage) isGetPageResponse_Page() {}

func (*GetPageResponse_VideoPage) isGetPageResponse_Page() {}

func (*GetPageResponse_PdfPage) isGetPageResponse_Page() {}

type GetPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId int64 `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"` // ID of the lesson that includes the pages.
	Limit    int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                       // Limit for pagination.
	Offset   int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                     // Offset for pagination.
}

func (x *GetPagesRequest) Reset() {
	*x = GetPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPagesRequest) ProtoMessage() {}

func (x *GetPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPagesRequest.ProtoReflect.Descriptor instead.
func (*GetPagesRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{22}
}

func (x *GetPagesRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *GetPagesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPagesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []*BasePage `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"` // The retrieved list of pages in the lesson.
}

func (x *GetPagesResponse) Reset() {
	*x = GetPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPagesResponse) ProtoMessage() {}

func (x *GetPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPagesResponse.ProtoReflect.Descriptor instead.
func (*GetPagesResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{23}
}

func (x *GetPagesResponse) GetPages() []*BasePage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type UpdatePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Page:
	//
	//	*UpdatePageRequest_ImagePage
	//	*UpdatePageRequest_VideoPage
	//	*UpdatePageRequest_PdfPage
	Page isUpdatePageRequest_Page `protobuf_oneof:"page"`
}

func (x *UpdatePageRequest) Reset() {
	*x = UpdatePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePageRequest) ProtoMessage() {}

func (x *UpdatePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePageRequest.ProtoReflect.Descriptor instead.
func (*UpdatePageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{24}
}

func (m *UpdatePageRequest) GetPage() isUpdatePageRequest_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (x *UpdatePageRequest) GetImagePage() *UpdateImagePage {
	if x, ok := x.GetPage().(*UpdatePageRequest_ImagePage); ok {
		return x.ImagePage
	}
	return nil
}

func (x *UpdatePageRequest) GetVideoPage() *UpdateVideoPage {
	if x, ok := x.GetPage().(*UpdatePageRequest_VideoPage); ok {
		return x.VideoPage
	}
	return nil
}

func (x *UpdatePageRequest) GetPdfPage() *UpdatePDFPage {
	if x, ok := x.GetPage().(*UpdatePageRequest_PdfPage); ok {
		return x.PdfPage
	}
	return nil
}

type isUpdatePageRequest_Page interface {
	isUpdatePageRequest_Page()
}

type UpdatePageRequest_ImagePage struct {
	ImagePage *UpdateImagePage `protobuf:"bytes,1,opt,name=image_page,json=imagePage,proto3,oneof"`
}

type UpdatePageRequest_VideoPage struct {
	VideoPage *UpdateVideoPage `protobuf:"bytes,2,opt,name=video_page,json=videoPage,proto3,oneof"`
}

type UpdatePageRequest_PdfPage struct {
	PdfPage *UpdatePDFPage `protobuf:"bytes,3,opt,name=pdf_page,json=pdfPage,proto3,oneof"`
}

func (*UpdatePageRequest_ImagePage) isUpdatePageRequest_Page() {}

func (*UpdatePageRequest_VideoPage) isUpdatePageRequest_Page() {}

func (*UpdatePageRequest_PdfPage) isUpdatePageRequest_Page() {}

type UpdatePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the updated page.
	Success bool  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdatePageResponse) Reset() {
	*x = UpdatePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePageResponse) ProtoMessage() {}

func (x *UpdatePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePageResponse.ProtoReflect.Descriptor instead.
func (*UpdatePageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{25}
}

func (x *UpdatePageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeletePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the page to delete.
}

func (x *DeletePageRequest) Reset() {
	*x = DeletePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePageRequest) ProtoMessage() {}

func (x *DeletePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePageRequest.ProtoReflect.Descriptor instead.
func (*DeletePageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{26}
}

func (x *DeletePageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the page was successfully deleted.
}

func (x *DeletePageResponse) Reset() {
	*x = DeletePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePageResponse) ProtoMessage() {}

func (x *DeletePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePageResponse.ProtoReflect.Descriptor instead.
func (*DeletePageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{27}
}

func (x *DeletePageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // ID of the channel.
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the channel.
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the channel.
	CreatedBy      string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the channel.
	LastModifiedBy string `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the channel.
	CreatedAt      string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Timestamp when the channel was created.
	Modified       string `protobuf:"bytes,7,opt,name=modified,proto3" json:"modified,omitempty"`                                     // Timestamp when the channel was last modified.
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{28}
}

func (x *Channel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Channel) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Channel) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *Channel) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Channel) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

type ChannelWithPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // ID of the channel.
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the channel.
	Description    string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the channel.
	CreatedBy      string  `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the channel.
	LastModifiedBy string  `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the channel.
	CreatedAt      string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Timestamp when the channel was created.
	Modified       string  `protobuf:"bytes,7,opt,name=modified,proto3" json:"modified,omitempty"`                                     // Timestamp when the channel was last modified.
	Plans          []*Plan `protobuf:"bytes,8,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *ChannelWithPlans) Reset() {
	*x = ChannelWithPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelWithPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelWithPlans) ProtoMessage() {}

func (x *ChannelWithPlans) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelWithPlans.ProtoReflect.Descriptor instead.
func (*ChannelWithPlans) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelWithPlans) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelWithPlans) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelWithPlans) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelWithPlans) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ChannelWithPlans) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *ChannelWithPlans) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ChannelWithPlans) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *ChannelWithPlans) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the channel.
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the channel.
	CreatedBy       string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the channel.
	LastModifiedBy  string `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the channel.
	LearningGroupId string `protobuf:"bytes,5,opt,name=learning_group_id,json=learningGroupId,proto3" json:"learning_group_id,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{30}
}

func (x *CreateChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChannelRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateChannelRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateChannelRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *CreateChannelRequest) GetLearningGroupId() string {
	if x != nil {
		return x.LearningGroupId
	}
	return ""
}

type CreateChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the new channel.
}

func (x *CreateChannelResponse) Reset() {
	*x = CreateChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResponse) ProtoMessage() {}

func (x *CreateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{31}
}

func (x *CreateChannelResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel to retrieve.
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{32}
}

func (x *GetChannelRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type GetChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *ChannelWithPlans `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"` // The retrieved channel.
}

func (x *GetChannelResponse) Reset() {
	*x = GetChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelResponse) ProtoMessage() {}

func (x *GetChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelResponse.ProtoReflect.Descriptor instead.
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{33}
}

func (x *GetChannelResponse) GetChannel() *ChannelWithPlans {
	if x != nil {
		return x.Channel
	}
	return nil
}

type GetChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningGroupIds []string `protobuf:"bytes,1,rep,name=learning_group_ids,json=learningGroupIds,proto3" json:"learning_group_ids,omitempty"`
	Limit            int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`   // Limit for pagination.
	Offset           int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // Offset for pagination.
}

func (x *GetChannelsRequest) Reset() {
	*x = GetChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsRequest) ProtoMessage() {}

func (x *GetChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetChannelsRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{34}
}

func (x *GetChannelsRequest) GetLearningGroupIds() []string {
	if x != nil {
		return x.LearningGroupIds
	}
	return nil
}

func (x *GetChannelsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChannelsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*Channel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"` // The retrieved list of channels.
}

func (x *GetChannelsResponse) Reset() {
	*x = GetChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsResponse) ProtoMessage() {}

func (x *GetChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetChannelsResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{35}
}

func (x *GetChannelsResponse) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type UpdateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           // ID of the user who modified the channel.
	ChannelId   int64   `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel.
	Name        *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`                       // Name of the channel.
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`         // Description of the channel.
}

func (x *UpdateChannelRequest) Reset() {
	*x = UpdateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRequest) ProtoMessage() {}

func (x *UpdateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateChannelRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateChannelRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdateChannelRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateChannelRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the updated channel .
}

func (x *UpdateChannelResponse) Reset() {
	*x = UpdateChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelResponse) ProtoMessage() {}

func (x *UpdateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelResponse.ProtoReflect.Descriptor instead.
func (*UpdateChannelResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateChannelResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel to delete.
}

func (x *DeleteChannelRequest) Reset() {
	*x = DeleteChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRequest) ProtoMessage() {}

func (x *DeleteChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteChannelRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type DeleteChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the channel was successfully deleted.
}

func (x *DeleteChannelResponse) Reset() {
	*x = DeleteChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelResponse) ProtoMessage() {}

func (x *DeleteChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelResponse.ProtoReflect.Descriptor instead.
func (*DeleteChannelResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteChannelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ShareChannelToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId  int64    `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	LgroupsIds []string `protobuf:"bytes,2,rep,name=lgroups_ids,json=lgroupsIds,proto3" json:"lgroups_ids,omitempty"`
	CreatedBy  string   `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *ShareChannelToGroupRequest) Reset() {
	*x = ShareChannelToGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareChannelToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareChannelToGroupRequest) ProtoMessage() {}

func (x *ShareChannelToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareChannelToGroupRequest.ProtoReflect.Descriptor instead.
func (*ShareChannelToGroupRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{40}
}

func (x *ShareChannelToGroupRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ShareChannelToGroupRequest) GetLgroupsIds() []string {
	if x != nil {
		return x.LgroupsIds
	}
	return nil
}

func (x *ShareChannelToGroupRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ShareChannelToGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the channel was successfully shared.
}

func (x *ShareChannelToGroupResponse) Reset() {
	*x = ShareChannelToGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareChannelToGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareChannelToGroupResponse) ProtoMessage() {}

func (x *ShareChannelToGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareChannelToGroupResponse.ProtoReflect.Descriptor instead.
func (*ShareChannelToGroupResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{41}
}

func (x *ShareChannelToGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // ID of the plan.
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the plan.
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the plan.
	CreatedBy      string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the plan.
	LastModifiedBy string `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the plan.
	IsPublished    bool   `protobuf:"varint,6,opt,name=is_published,json=isPublished,proto3" json:"is_published,omitempty"`           //
	Public         bool   `protobuf:"varint,7,opt,name=public,proto3" json:"public,omitempty"`                                        //
	CreatedAt      string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Timestamp when the plan was created.
	Modified       string `protobuf:"bytes,9,opt,name=modified,proto3" json:"modified,omitempty"`                                     // Timestamp when the plan was last modified.
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{42}
}

func (x *Plan) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Plan) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *Plan) GetIsPublished() bool {
	if x != nil {
		return x.IsPublished
	}
	return false
}

func (x *Plan) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Plan) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Plan) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

type CreatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                             // Name of the plan.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`               // Description of the plan.
	CreatedBy   string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`  // User ID who creates the plan.
	ChannelId   int64  `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // Сhannel ID within which the plan is created.
}

func (x *CreatePlanRequest) Reset() {
	*x = CreatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRequest) ProtoMessage() {}

func (x *CreatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{43}
}

func (x *CreatePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlanRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreatePlanRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

type CreatePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the new plan.
}

func (x *CreatePlanResponse) Reset() {
	*x = CreatePlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanResponse) ProtoMessage() {}

func (x *CreatePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{44}
}

func (x *CreatePlanResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel that includes the plans.
	PlanId    int64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`          // ID of the plan to retrieve.
}

func (x *GetPlanRequest) Reset() {
	*x = GetPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRequest) ProtoMessage() {}

func (x *GetPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{45}
}

func (x *GetPlanRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetPlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type GetPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"` // The retrieved plan.
}

func (x *GetPlanResponse) Reset() {
	*x = GetPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanResponse) ProtoMessage() {}

func (x *GetPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanResponse.ProtoReflect.Descriptor instead.
func (*GetPlanResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{46}
}

func (x *GetPlanResponse) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type GetPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId int64  `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel that includes the plans.
	Limit     int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                          // Limit for pagination.
	Offset    int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                        // Offset for pagination.
}

func (x *GetPlansRequest) Reset() {
	*x = GetPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlansRequest) ProtoMessage() {}

func (x *GetPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlansRequest.ProtoReflect.Descriptor instead.
func (*GetPlansRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{47}
}

func (x *GetPlansRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPlansRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GetPlansRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPlansRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"` // The retrieved list of plan.
}

func (x *GetPlansResponse) Reset() {
	*x = GetPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlansResponse) ProtoMessage() {}

func (x *GetPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlansResponse.ProtoReflect.Descriptor instead.
func (*GetPlansResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{48}
}

func (x *GetPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type UpdatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId      int64   `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                 // ID of the channel that includes the plans.
	PlanId         int64   `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`                          // ID of the plan to retrieve.
	Name           *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`                                       // Name of the plan.
	Description    *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`                         // Description of the plan.
	LastModifiedBy string  `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the plan.
	IsPublished    *bool   `protobuf:"varint,6,opt,name=is_published,json=isPublished,proto3,oneof" json:"is_published,omitempty"`     // Has the plan been published.
	Public         *bool   `protobuf:"varint,7,opt,name=public,proto3,oneof" json:"public,omitempty"`                                  // Is the plan public.
}

func (x *UpdatePlanRequest) Reset() {
	*x = UpdatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRequest) ProtoMessage() {}

func (x *UpdatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{49}
}

func (x *UpdatePlanRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *UpdatePlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdatePlanRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePlanRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePlanRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *UpdatePlanRequest) GetIsPublished() bool {
	if x != nil && x.IsPublished != nil {
		return *x.IsPublished
	}
	return false
}

func (x *UpdatePlanRequest) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

type UpdatePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the updated plan.
}

func (x *UpdatePlanResponse) Reset() {
	*x = UpdatePlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanResponse) ProtoMessage() {}

func (x *UpdatePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlanResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{50}
}

func (x *UpdatePlanResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel that includes the plans.
	PlanId    int64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`          // ID of the plan to retrieve.
}

func (x *DeletePlanRequest) Reset() {
	*x = DeletePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRequest) ProtoMessage() {}

func (x *DeletePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{51}
}

func (x *DeletePlanRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *DeletePlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type DeletePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the plan was successfully deleted.
}

func (x *DeletePlanResponse) Reset() {
	*x = DeletePlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanResponse) ProtoMessage() {}

func (x *DeletePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanResponse.ProtoReflect.Descriptor instead.
func (*DeletePlanResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{52}
}

func (x *DeletePlanResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SharePlanWithUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int64    `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // ID of the channel that includes the plans.
	PlanId    int64    `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`          // ID of the plan to retrieve.
	UsersIds  []string `protobuf:"bytes,3,rep,name=users_ids,json=usersIds,proto3" json:"users_ids,omitempty"`
	CreatedBy string   `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *SharePlanWithUsersRequest) Reset() {
	*x = SharePlanWithUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePlanWithUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePlanWithUsersRequest) ProtoMessage() {}

func (x *SharePlanWithUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePlanWithUsersRequest.ProtoReflect.Descriptor instead.
func (*SharePlanWithUsersRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{53}
}

func (x *SharePlanWithUsersRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *SharePlanWithUsersRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *SharePlanWithUsersRequest) GetUsersIds() []string {
	if x != nil {
		return x.UsersIds
	}
	return nil
}

func (x *SharePlanWithUsersRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type SharePlanWithUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the plan was successfully shared.
}

func (x *SharePlanWithUsersResponse) Reset() {
	*x = SharePlanWithUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePlanWithUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePlanWithUsersResponse) ProtoMessage() {}

func (x *SharePlanWithUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePlanWithUsersResponse.ProtoReflect.Descriptor instead.
func (*SharePlanWithUsersResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{54}
}

func (x *SharePlanWithUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Lesson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // ID of the lesson.
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the lesson.
	CreatedBy      string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the lesson.
	LastModifiedBy string `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the lesson.
	CreatedAt      string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Timestamp when the lesson was created.
	Modified       string `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`                                     // Timestamp when the lesson was last modified.
}

func (x *Lesson) Reset() {
	*x = Lesson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lesson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lesson) ProtoMessage() {}

func (x *Lesson) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lesson.ProtoReflect.Descriptor instead.
func (*Lesson) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{55}
}

func (x *Lesson) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lesson) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lesson) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Lesson) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *Lesson) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Lesson) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

type CreateLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the lesson.
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the lesson.
	CreatedBy      string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the lesson.
	LastModifiedBy string `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the lesson.
	PlanId         int64  `protobuf:"varint,5,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`                          // Plan ID within which the lesson is created.
}

func (x *CreateLessonRequest) Reset() {
	*x = CreateLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLessonRequest) ProtoMessage() {}

func (x *CreateLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLessonRequest.ProtoReflect.Descriptor instead.
func (*CreateLessonRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{56}
}

func (x *CreateLessonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLessonRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateLessonRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateLessonRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *CreateLessonRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type CreateLessonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the new lesson.
}

func (x *CreateLessonResponse) Reset() {
	*x = CreateLessonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLessonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLessonResponse) ProtoMessage() {}

func (x *CreateLessonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLessonResponse.ProtoReflect.Descriptor instead.
func (*CreateLessonResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{57}
}

func (x *CreateLessonResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId int64 `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"` // ID of the lesson to retrieve.
	PlanId   int64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`       // Plan ID within which the lesson is created.
}

func (x *GetLessonRequest) Reset() {
	*x = GetLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLessonRequest) ProtoMessage() {}

func (x *GetLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLessonRequest.ProtoReflect.Descriptor instead.
func (*GetLessonRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{58}
}

func (x *GetLessonRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *GetLessonRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type GetLessonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lesson *Lesson `protobuf:"bytes,1,opt,name=lesson,proto3" json:"lesson,omitempty"` // The retrieved lesson.
}

func (x *GetLessonResponse) Reset() {
	*x = GetLessonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLessonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLessonResponse) ProtoMessage() {}

func (x *GetLessonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLessonResponse.ProtoReflect.Descriptor instead.
func (*GetLessonResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{59}
}

func (x *GetLessonResponse) GetLesson() *Lesson {
	if x != nil {
		return x.Lesson
	}
	return nil
}

type GetLessonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId int64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"` // ID of the plan that includes the lesson.
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                 // Limit for pagination.
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`               // Offset for pagination.
}

func (x *GetLessonsRequest) Reset() {
	*x = GetLessonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLessonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLessonsRequest) ProtoMessage() {}

func (x *GetLessonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLessonsRequest.ProtoReflect.Descriptor instead.
func (*GetLessonsRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{60}
}

func (x *GetLessonsRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *GetLessonsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLessonsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetLessonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lessons []*Lesson `protobuf:"bytes,1,rep,name=lessons,proto3" json:"lessons,omitempty"` // The retrieved list of lesson.
}

func (x *GetLessonsResponse) Reset() {
	*x = GetLessonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLessonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLessonsResponse) ProtoMessage() {}

func (x *GetLessonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLessonsResponse.ProtoReflect.Descriptor instead.
func (*GetLessonsResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{61}
}

func (x *GetLessonsResponse) GetLessons() []*Lesson {
	if x != nil {
		return x.Lessons
	}
	return nil
}

type UpdateLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId         int64  `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`                          // ID of the plan that includes the lesson.
	LessonId       int64  `protobuf:"varint,2,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`                    // ID of the lesson.
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                             // Name of the lesson.
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                               // Description of the lesson.
	LastModifiedBy string `protobuf:"bytes,5,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the lesson.
}

func (x *UpdateLessonRequest) Reset() {
	*x = UpdateLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLessonRequest) ProtoMessage() {}

func (x *UpdateLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLessonRequest.ProtoReflect.Descriptor instead.
func (*UpdateLessonRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateLessonRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateLessonRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *UpdateLessonRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLessonRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateLessonRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

type UpdateLessonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the new lesson.
}

func (x *UpdateLessonResponse) Reset() {
	*x = UpdateLessonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLessonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLessonResponse) ProtoMessage() {}

func (x *UpdateLessonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLessonResponse.ProtoReflect.Descriptor instead.
func (*UpdateLessonResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateLessonResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteLessonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId int64 `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"` // ID of the lesson to delete.
	PlanId   int64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`       // Plan ID within which the lesson is created.
}

func (x *DeleteLessonRequest) Reset() {
	*x = DeleteLessonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLessonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLessonRequest) ProtoMessage() {}

func (x *DeleteLessonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLessonRequest.ProtoReflect.Descriptor instead.
func (*DeleteLessonRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteLessonRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *DeleteLessonRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type DeleteLessonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Indicates if the lesson was successfully deleted.
}

func (x *DeleteLessonResponse) Reset() {
	*x = DeleteLessonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLessonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLessonResponse) ProtoMessage() {}

func (x *DeleteLessonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLessonResponse.ProtoReflect.Descriptor instead.
func (*DeleteLessonResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteLessonResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type QuestionPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 // ID of the page.
	LessonId       int64        `protobuf:"varint,2,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`                                     // Lesson ID within which the page is created.
	CreatedBy      string       `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                                   // User ID who creates the page.
	LastModifiedBy string       `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"`                  // ID of the user who modified the page.
	CreatedAt      string       `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                   // Timestamp when the page was created.
	Modified       string       `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`                                                      // Timestamp when the page was last modified.
	ContentType    ContentType  `protobuf:"varint,7,opt,name=content_type,json=contentType,proto3,enum=lp.v1.ContentType" json:"content_type,omitempty"`     // Сontent type of page
	QuestionType   QuestionType `protobuf:"varint,8,opt,name=question_type,json=questionType,proto3,enum=lp.v1.QuestionType" json:"question_type,omitempty"` // Question type for question
	Question       string       `protobuf:"bytes,9,opt,name=question,proto3" json:"question,omitempty"`                                                      // Question.
	OptionA        string       `protobuf:"bytes,10,opt,name=option_a,json=optionA,proto3" json:"option_a,omitempty"`                                        // Option answer.
	OptionB        string       `protobuf:"bytes,11,opt,name=option_b,json=optionB,proto3" json:"option_b,omitempty"`                                        // Option answer.
	OptionC        string       `protobuf:"bytes,12,opt,name=option_c,json=optionC,proto3" json:"option_c,omitempty"`                                        // Option answer.
	OptionD        string       `protobuf:"bytes,13,opt,name=option_d,json=optionD,proto3" json:"option_d,omitempty"`                                        // Option answer.
	OptionE        string       `protobuf:"bytes,14,opt,name=option_e,json=optionE,proto3" json:"option_e,omitempty"`                                        // Option answer.
	Answer         string       `protobuf:"bytes,15,opt,name=answer,proto3" json:"answer,omitempty"`                                                         // Answer for question.
}

func (x *QuestionPage) Reset() {
	*x = QuestionPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionPage) ProtoMessage() {}

func (x *QuestionPage) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionPage.ProtoReflect.Descriptor instead.
func (*QuestionPage) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{66}
}

func (x *QuestionPage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionPage) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *QuestionPage) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *QuestionPage) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *QuestionPage) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *QuestionPage) GetModified() string {
	if x != nil {
		return x.Modified
	}
	return ""
}

func (x *QuestionPage) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_UNSPECIFIED
}

func (x *QuestionPage) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_QUESTION_TYPE_UNSPECIFIED
}

func (x *QuestionPage) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionPage) GetOptionA() string {
	if x != nil {
		return x.OptionA
	}
	return ""
}

func (x *QuestionPage) GetOptionB() string {
	if x != nil {
		return x.OptionB
	}
	return ""
}

func (x *QuestionPage) GetOptionC() string {
	if x != nil {
		return x.OptionC
	}
	return ""
}

func (x *QuestionPage) GetOptionD() string {
	if x != nil {
		return x.OptionD
	}
	return ""
}

func (x *QuestionPage) GetOptionE() string {
	if x != nil {
		return x.OptionE
	}
	return ""
}

func (x *QuestionPage) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type CreateQuestionPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId       int64   `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`                    // Lesson ID within which the page is created.
	CreatedBy      string  `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                  // User ID who creates the lesson.
	LastModifiedBy string  `protobuf:"bytes,3,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the page.
	Question       string  `protobuf:"bytes,6,opt,name=question,proto3" json:"question,omitempty"`                                     // Question.
	OptionA        string  `protobuf:"bytes,7,opt,name=option_a,json=optionA,proto3" json:"option_a,omitempty"`                        // Option answer.
	OptionB        string  `protobuf:"bytes,8,opt,name=option_b,json=optionB,proto3" json:"option_b,omitempty"`                        // Option answer.
	OptionC        *string `protobuf:"bytes,9,opt,name=option_c,json=optionC,proto3,oneof" json:"option_c,omitempty"`                  // Option answer.
	OptionD        *string `protobuf:"bytes,10,opt,name=option_d,json=optionD,proto3,oneof" json:"option_d,omitempty"`                 // Option answer.
	OptionE        *string `protobuf:"bytes,11,opt,name=option_e,json=optionE,proto3,oneof" json:"option_e,omitempty"`                 // Option answer.
	Answer         Answer  `protobuf:"varint,12,opt,name=answer,proto3,enum=lp.v1.Answer" json:"answer,omitempty"`                     // Answer for question.
}

func (x *CreateQuestionPageRequest) Reset() {
	*x = CreateQuestionPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionPageRequest) ProtoMessage() {}

func (x *CreateQuestionPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionPageRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionPageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{67}
}

func (x *CreateQuestionPageRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *CreateQuestionPageRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetOptionA() string {
	if x != nil {
		return x.OptionA
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetOptionB() string {
	if x != nil {
		return x.OptionB
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetOptionC() string {
	if x != nil && x.OptionC != nil {
		return *x.OptionC
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetOptionD() string {
	if x != nil && x.OptionD != nil {
		return *x.OptionD
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetOptionE() string {
	if x != nil && x.OptionE != nil {
		return *x.OptionE
	}
	return ""
}

func (x *CreateQuestionPageRequest) GetAnswer() Answer {
	if x != nil {
		return x.Answer
	}
	return Answer_ANSWER_UNSPECIFIED
}

type CreateQuestionPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the new question page.
}

func (x *CreateQuestionPageResponse) Reset() {
	*x = CreateQuestionPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionPageResponse) ProtoMessage() {}

func (x *CreateQuestionPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionPageResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionPageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{68}
}

func (x *CreateQuestionPageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetQuestionPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the question page to retrieve.
}

func (x *GetQuestionPageRequest) Reset() {
	*x = GetQuestionPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionPageRequest) ProtoMessage() {}

func (x *GetQuestionPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionPageRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionPageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{69}
}

func (x *GetQuestionPageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetQuestionPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionPage *QuestionPage `protobuf:"bytes,1,opt,name=question_page,json=questionPage,proto3" json:"question_page,omitempty"` // The retrieved question page.
}

func (x *GetQuestionPageResponse) Reset() {
	*x = GetQuestionPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionPageResponse) ProtoMessage() {}

func (x *GetQuestionPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionPageResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionPageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{70}
}

func (x *GetQuestionPageResponse) GetQuestionPage() *QuestionPage {
	if x != nil {
		return x.QuestionPage
	}
	return nil
}

type UpdateQuestionPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                // ID of the lesson.
	LastModifiedBy string  `protobuf:"bytes,2,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty"` // ID of the user who modified the lesson.
	Question       *string `protobuf:"bytes,3,opt,name=question,proto3,oneof" json:"question,omitempty"`
	OptionA        *string `protobuf:"bytes,4,opt,name=option_a,json=optionA,proto3,oneof" json:"option_a,omitempty"`
	OptionB        *string `protobuf:"bytes,5,opt,name=option_b,json=optionB,proto3,oneof" json:"option_b,omitempty"`
	OptionC        *string `protobuf:"bytes,6,opt,name=option_c,json=optionC,proto3,oneof" json:"option_c,omitempty"`
	OptionD        *string `protobuf:"bytes,7,opt,name=option_d,json=optionD,proto3,oneof" json:"option_d,omitempty"`
	OptionE        *string `protobuf:"bytes,8,opt,name=option_e,json=optionE,proto3,oneof" json:"option_e,omitempty"`
	Answer         *Answer `protobuf:"varint,9,opt,name=answer,proto3,enum=lp.v1.Answer,oneof" json:"answer,omitempty"`
}

func (x *UpdateQuestionPageRequest) Reset() {
	*x = UpdateQuestionPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionPageRequest) ProtoMessage() {}

func (x *UpdateQuestionPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionPageRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionPageRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateQuestionPageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQuestionPageRequest) GetLastModifiedBy() string {
	if x != nil {
		return x.LastModifiedBy
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetQuestion() string {
	if x != nil && x.Question != nil {
		return *x.Question
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetOptionA() string {
	if x != nil && x.OptionA != nil {
		return *x.OptionA
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetOptionB() string {
	if x != nil && x.OptionB != nil {
		return *x.OptionB
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetOptionC() string {
	if x != nil && x.OptionC != nil {
		return *x.OptionC
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetOptionD() string {
	if x != nil && x.OptionD != nil {
		return *x.OptionD
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetOptionE() string {
	if x != nil && x.OptionE != nil {
		return *x.OptionE
	}
	return ""
}

func (x *UpdateQuestionPageRequest) GetAnswer() Answer {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return Answer_ANSWER_UNSPECIFIED
}

type UpdateQuestionPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the updated pdf page.
}

func (x *UpdateQuestionPageResponse) Reset() {
	*x = UpdateQuestionPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionPageResponse) ProtoMessage() {}

func (x *UpdateQuestionPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionPageResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionPageResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateQuestionPageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessonId  int64  `protobuf:"varint,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	PlanId    int64  `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	ChannelId int64  `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateAttemptRequest) Reset() {
	*x = CreateAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttemptRequest) ProtoMessage() {}

func (x *CreateAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttemptRequest.ProtoReflect.Descriptor instead.
func (*CreateAttemptRequest) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{73}
}

func (x *CreateAttemptRequest) GetLessonId() int64 {
	if x != nil {
		return x.LessonId
	}
	return 0
}

func (x *CreateAttemptRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *CreateAttemptRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *CreateAttemptRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreateAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the created attempt.
	Success bool  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateAttemptResponse) Reset() {
	*x = CreateAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttemptResponse) ProtoMessage() {}

func (x *CreateAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttemptResponse.ProtoReflect.Descriptor instead.
func (*CreateAttemptResponse) Descriptor() ([]byte, []int) {
	return file_lp_proto_rawDescGZIP(), []int{74}
}

func (x *CreateAttemptResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateAttemptResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_lp_proto protoreflect.FileDescriptor

var file_lp_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6c, 0x70, 0x2e, 0x76,
	0x31, 0x22, 0x4e, 0x0a, 0x1a, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1b, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x22, 0x51, 0x0a, 0x17, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0xf2, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x4a, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x75, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x07, 0x50, 0x44, 0x46, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x64, 0x66, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x64,
	0x66, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x64, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x64, 0x66, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x64,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x44,
	0x46, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x64, 0x66, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x44, 0x46, 0x50,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x64, 0x66, 0x50, 0x61, 0x67, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xc0, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46, 0x50, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x64, 0x66, 0x50, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xff, 0x01,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22,
	0xc1, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x41, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x1a, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x37, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x8b, 0x02, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x77, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6c,
	0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6c, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xaf, 0x02,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22,
	0x24, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x36, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x06, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0xad, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0x26, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x22, 0x5a, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52,
	0x07, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x26, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xeb, 0x03,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x81, 0x03, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x22,
	0x2c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x03, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x48, 0x06, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x41, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2a, 0x58, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x06,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x10, 0x05, 0x32, 0xa6, 0x11, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1b, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e,
	0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2f, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x2e,
	0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x13, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x12, 0x17, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x12, 0x1a, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6c, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x6c,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a,
	0x0c, 0x6c, 0x70, 0x2e, 0x6c, 0x70, 0x2e, 0x76, 0x31, 0x3b, 0x6c, 0x70, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lp_proto_rawDescOnce sync.Once
	file_lp_proto_rawDescData = file_lp_proto_rawDesc
)

func file_lp_proto_rawDescGZIP() []byte {
	file_lp_proto_rawDescOnce.Do(func() {
		file_lp_proto_rawDescData = protoimpl.X.CompressGZIP(file_lp_proto_rawDescData)
	})
	return file_lp_proto_rawDescData
}

var file_lp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_lp_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_lp_proto_goTypes = []any{
	(ContentType)(0),                                  // 0: lp.v1.ContentType
	(QuestionType)(0),                                 // 1: lp.v1.QuestionType
	(Answer)(0),                                       // 2: lp.v1.Answer
	(*IsUserShareWithPlanRequest)(nil),                // 3: lp.v1.IsUserShareWithPlanRequest
	(*IsUserShareWithPlanResponse)(nil),               // 4: lp.v1.IsUserShareWithPlanResponse
	(*GetLearningGroupsShareWithChannelRequest)(nil),  // 5: lp.v1.GetLearningGroupsShareWithChannelRequest
	(*GetLearningGroupsShareWithChannelResponse)(nil), // 6: lp.v1.GetLearningGroupsShareWithChannelResponse
	(*IsChannelCreatorRequest)(nil),                   // 7: lp.v1.IsChannelCreatorRequest
	(*IsChannelCreatorResponse)(nil),                  // 8: lp.v1.IsChannelCreatorResponse
	(*BasePage)(nil),                                  // 9: lp.v1.BasePage
	(*CreateBasePage)(nil),                            // 10: lp.v1.CreateBasePage
	(*UpdateBasePage)(nil),                            // 11: lp.v1.UpdateBasePage
	(*ImagePage)(nil),                                 // 12: lp.v1.ImagePage
	(*CreateImagePage)(nil),                           // 13: lp.v1.CreateImagePage
	(*UpdateImagePage)(nil),                           // 14: lp.v1.UpdateImagePage
	(*VideoPage)(nil),                                 // 15: lp.v1.VideoPage
	(*CreateVideoPage)(nil),                           // 16: lp.v1.CreateVideoPage
	(*UpdateVideoPage)(nil),                           // 17: lp.v1.UpdateVideoPage
	(*PDFPage)(nil),                                   // 18: lp.v1.PDFPage
	(*CreatePDFPage)(nil),                             // 19: lp.v1.CreatePDFPage
	(*UpdatePDFPage)(nil),                             // 20: lp.v1.UpdatePDFPage
	(*CreatePageRequest)(nil),                         // 21: lp.v1.CreatePageRequest
	(*CreatePageResponse)(nil),                        // 22: lp.v1.CreatePageResponse
	(*GetPageRequest)(nil),                            // 23: lp.v1.GetPageRequest
	(*GetPageResponse)(nil),                           // 24: lp.v1.GetPageResponse
	(*GetPagesRequest)(nil),                           // 25: lp.v1.GetPagesRequest
	(*GetPagesResponse)(nil),                          // 26: lp.v1.GetPagesResponse
	(*UpdatePageRequest)(nil),                         // 27: lp.v1.UpdatePageRequest
	(*UpdatePageResponse)(nil),                        // 28: lp.v1.UpdatePageResponse
	(*DeletePageRequest)(nil),                         // 29: lp.v1.DeletePageRequest
	(*DeletePageResponse)(nil),                        // 30: lp.v1.DeletePageResponse
	(*Channel)(nil),                                   // 31: lp.v1.Channel
	(*ChannelWithPlans)(nil),                          // 32: lp.v1.ChannelWithPlans
	(*CreateChannelRequest)(nil),                      // 33: lp.v1.CreateChannelRequest
	(*CreateChannelResponse)(nil),                     // 34: lp.v1.CreateChannelResponse
	(*GetChannelRequest)(nil),                         // 35: lp.v1.GetChannelRequest
	(*GetChannelResponse)(nil),                        // 36: lp.v1.GetChannelResponse
	(*GetChannelsRequest)(nil),                        // 37: lp.v1.GetChannelsRequest
	(*GetChannelsResponse)(nil),                       // 38: lp.v1.GetChannelsResponse
	(*UpdateChannelRequest)(nil),                      // 39: lp.v1.UpdateChannelRequest
	(*UpdateChannelResponse)(nil),                     // 40: lp.v1.UpdateChannelResponse
	(*DeleteChannelRequest)(nil),                      // 41: lp.v1.DeleteChannelRequest
	(*DeleteChannelResponse)(nil),                     // 42: lp.v1.DeleteChannelResponse
	(*ShareChannelToGroupRequest)(nil),                // 43: lp.v1.ShareChannelToGroupRequest
	(*ShareChannelToGroupResponse)(nil),               // 44: lp.v1.ShareChannelToGroupResponse
	(*Plan)(nil),                                      // 45: lp.v1.Plan
	(*CreatePlanRequest)(nil),                         // 46: lp.v1.CreatePlanRequest
	(*CreatePlanResponse)(nil),                        // 47: lp.v1.CreatePlanResponse
	(*GetPlanRequest)(nil),                            // 48: lp.v1.GetPlanRequest
	(*GetPlanResponse)(nil),                           // 49: lp.v1.GetPlanResponse
	(*GetPlansRequest)(nil),                           // 50: lp.v1.GetPlansRequest
	(*GetPlansResponse)(nil),                          // 51: lp.v1.GetPlansResponse
	(*UpdatePlanRequest)(nil),                         // 52: lp.v1.UpdatePlanRequest
	(*UpdatePlanResponse)(nil),                        // 53: lp.v1.UpdatePlanResponse
	(*DeletePlanRequest)(nil),                         // 54: lp.v1.DeletePlanRequest
	(*DeletePlanResponse)(nil),                        // 55: lp.v1.DeletePlanResponse
	(*SharePlanWithUsersRequest)(nil),                 // 56: lp.v1.SharePlanWithUsersRequest
	(*SharePlanWithUsersResponse)(nil),                // 57: lp.v1.SharePlanWithUsersResponse
	(*Lesson)(nil),                                    // 58: lp.v1.Lesson
	(*CreateLessonRequest)(nil),                       // 59: lp.v1.CreateLessonRequest
	(*CreateLessonResponse)(nil),                      // 60: lp.v1.CreateLessonResponse
	(*GetLessonRequest)(nil),                          // 61: lp.v1.GetLessonRequest
	(*GetLessonResponse)(nil),                         // 62: lp.v1.GetLessonResponse
	(*GetLessonsRequest)(nil),                         // 63: lp.v1.GetLessonsRequest
	(*GetLessonsResponse)(nil),                        // 64: lp.v1.GetLessonsResponse
	(*UpdateLessonRequest)(nil),                       // 65: lp.v1.UpdateLessonRequest
	(*UpdateLessonResponse)(nil),                      // 66: lp.v1.UpdateLessonResponse
	(*DeleteLessonRequest)(nil),                       // 67: lp.v1.DeleteLessonRequest
	(*DeleteLessonResponse)(nil),                      // 68: lp.v1.DeleteLessonResponse
	(*QuestionPage)(nil),                              // 69: lp.v1.QuestionPage
	(*CreateQuestionPageRequest)(nil),                 // 70: lp.v1.CreateQuestionPageRequest
	(*CreateQuestionPageResponse)(nil),                // 71: lp.v1.CreateQuestionPageResponse
	(*GetQuestionPageRequest)(nil),                    // 72: lp.v1.GetQuestionPageRequest
	(*GetQuestionPageResponse)(nil),                   // 73: lp.v1.GetQuestionPageResponse
	(*UpdateQuestionPageRequest)(nil),                 // 74: lp.v1.UpdateQuestionPageRequest
	(*UpdateQuestionPageResponse)(nil),                // 75: lp.v1.UpdateQuestionPageResponse
	(*CreateAttemptRequest)(nil),                      // 76: lp.v1.CreateAttemptRequest
	(*CreateAttemptResponse)(nil),                     // 77: lp.v1.CreateAttemptResponse
}
var file_lp_proto_depIdxs = []int32{
	0,  // 0: lp.v1.BasePage.content_type:type_name -> lp.v1.ContentType
	9,  // 1: lp.v1.ImagePage.base:type_name -> lp.v1.BasePage
	10, // 2: lp.v1.CreateImagePage.base:type_name -> lp.v1.CreateBasePage
	11, // 3: lp.v1.UpdateImagePage.base:type_name -> lp.v1.UpdateBasePage
	9,  // 4: lp.v1.VideoPage.base:type_name -> lp.v1.BasePage
	10, // 5: lp.v1.CreateVideoPage.base:type_name -> lp.v1.CreateBasePage
	11, // 6: lp.v1.UpdateVideoPage.base:type_name -> lp.v1.UpdateBasePage
	9,  // 7: lp.v1.PDFPage.base:type_name -> lp.v1.BasePage
	10, // 8: lp.v1.CreatePDFPage.base:type_name -> lp.v1.CreateBasePage
	11, // 9: lp.v1.UpdatePDFPage.base:type_name -> lp.v1.UpdateBasePage
	13, // 10: lp.v1.CreatePageRequest.image_page:type_name -> lp.v1.CreateImagePage
	16, // 11: lp.v1.CreatePageRequest.video_page:type_name -> lp.v1.CreateVideoPage
	19, // 12: lp.v1.CreatePageRequest.pdf_page:type_name -> lp.v1.CreatePDFPage
	0,  // 13: lp.v1.GetPageRequest.content_type:type_name -> lp.v1.ContentType
	12, // 14: lp.v1.GetPageResponse.image_page:type_name -> lp.v1.ImagePage
	15, // 15: lp.v1.GetPageResponse.video_page:type_name -> lp.v1.VideoPage
	18, // 16: lp.v1.GetPageResponse.pdf_page:type_name -> lp.v1.PDFPage
	9,  // 17: lp.v1.GetPagesResponse.pages:type_name -> lp.v1.BasePage
	14, // 18: lp.v1.UpdatePageRequest.image_page:type_name -> lp.v1.UpdateImagePage
	17, // 19: lp.v1.UpdatePageRequest.video_page:type_name -> lp.v1.UpdateVideoPage
	20, // 20: lp.v1.UpdatePageRequest.pdf_page:type_name -> lp.v1.UpdatePDFPage
	45, // 21: lp.v1.ChannelWithPlans.plans:type_name -> lp.v1.Plan
	32, // 22: lp.v1.GetChannelResponse.channel:type_name -> lp.v1.ChannelWithPlans
	31, // 23: lp.v1.GetChannelsResponse.channels:type_name -> lp.v1.Channel
	45, // 24: lp.v1.GetPlanResponse.plan:type_name -> lp.v1.Plan
	45, // 25: lp.v1.GetPlansResponse.plans:type_name -> lp.v1.Plan
	58, // 26: lp.v1.GetLessonResponse.lesson:type_name -> lp.v1.Lesson
	58, // 27: lp.v1.GetLessonsResponse.lessons:type_name -> lp.v1.Lesson
	0,  // 28: lp.v1.QuestionPage.content_type:type_name -> lp.v1.ContentType
	1,  // 29: lp.v1.QuestionPage.question_type:type_name -> lp.v1.QuestionType
	2,  // 30: lp.v1.CreateQuestionPageRequest.answer:type_name -> lp.v1.Answer
	69, // 31: lp.v1.GetQuestionPageResponse.question_page:type_name -> lp.v1.QuestionPage
	2,  // 32: lp.v1.UpdateQuestionPageRequest.answer:type_name -> lp.v1.Answer
	33, // 33: lp.v1.LearningPlatform.CreateChannel:input_type -> lp.v1.CreateChannelRequest
	35, // 34: lp.v1.LearningPlatform.GetChannel:input_type -> lp.v1.GetChannelRequest
	37, // 35: lp.v1.LearningPlatform.GetChannels:input_type -> lp.v1.GetChannelsRequest
	39, // 36: lp.v1.LearningPlatform.UpdateChannel:input_type -> lp.v1.UpdateChannelRequest
	41, // 37: lp.v1.LearningPlatform.DeleteChannel:input_type -> lp.v1.DeleteChannelRequest
	43, // 38: lp.v1.LearningPlatform.ShareChannelToGroup:input_type -> lp.v1.ShareChannelToGroupRequest
	7,  // 39: lp.v1.LearningPlatform.IsChannelCreator:input_type -> lp.v1.IsChannelCreatorRequest
	5,  // 40: lp.v1.LearningPlatform.GetLearningGroupsShareWithChannel:input_type -> lp.v1.GetLearningGroupsShareWithChannelRequest
	46, // 41: lp.v1.LearningPlatform.CreatePlan:input_type -> lp.v1.CreatePlanRequest
	48, // 42: lp.v1.LearningPlatform.GetPlan:input_type -> lp.v1.GetPlanRequest
	50, // 43: lp.v1.LearningPlatform.GetPlans:input_type -> lp.v1.GetPlansRequest
	52, // 44: lp.v1.LearningPlatform.UpdatePlan:input_type -> lp.v1.UpdatePlanRequest
	54, // 45: lp.v1.LearningPlatform.DeletePlan:input_type -> lp.v1.DeletePlanRequest
	56, // 46: lp.v1.LearningPlatform.SharePlanWithUsers:input_type -> lp.v1.SharePlanWithUsersRequest
	3,  // 47: lp.v1.LearningPlatform.IsUserShareWithPlan:input_type -> lp.v1.IsUserShareWithPlanRequest
	59, // 48: lp.v1.LearningPlatform.CreateLesson:input_type -> lp.v1.CreateLessonRequest
	61, // 49: lp.v1.LearningPlatform.GetLesson:input_type -> lp.v1.GetLessonRequest
	63, // 50: lp.v1.LearningPlatform.GetLessons:input_type -> lp.v1.GetLessonsRequest
	65, // 51: lp.v1.LearningPlatform.UpdateLesson:input_type -> lp.v1.UpdateLessonRequest
	67, // 52: lp.v1.LearningPlatform.DeleteLesson:input_type -> lp.v1.DeleteLessonRequest
	21, // 53: lp.v1.LearningPlatform.CreatePage:input_type -> lp.v1.CreatePageRequest
	23, // 54: lp.v1.LearningPlatform.GetPage:input_type -> lp.v1.GetPageRequest
	25, // 55: lp.v1.LearningPlatform.GetPages:input_type -> lp.v1.GetPagesRequest
	27, // 56: lp.v1.LearningPlatform.UpdatePage:input_type -> lp.v1.UpdatePageRequest
	29, // 57: lp.v1.LearningPlatform.DeletePage:input_type -> lp.v1.DeletePageRequest
	70, // 58: lp.v1.LearningPlatform.CreateQuestionPage:input_type -> lp.v1.CreateQuestionPageRequest
	72, // 59: lp.v1.LearningPlatform.GetQuestionPage:input_type -> lp.v1.GetQuestionPageRequest
	74, // 60: lp.v1.LearningPlatform.UpdateQuestionPage:input_type -> lp.v1.UpdateQuestionPageRequest
	76, // 61: lp.v1.LearningPlatform.CreateAttempt:input_type -> lp.v1.CreateAttemptRequest
	34, // 62: lp.v1.LearningPlatform.CreateChannel:output_type -> lp.v1.CreateChannelResponse
	36, // 63: lp.v1.LearningPlatform.GetChannel:output_type -> lp.v1.GetChannelResponse
	38, // 64: lp.v1.LearningPlatform.GetChannels:output_type -> lp.v1.GetChannelsResponse
	40, // 65: lp.v1.LearningPlatform.UpdateChannel:output_type -> lp.v1.UpdateChannelResponse
	42, // 66: lp.v1.LearningPlatform.DeleteChannel:output_type -> lp.v1.DeleteChannelResponse
	44, // 67: lp.v1.LearningPlatform.ShareChannelToGroup:output_type -> lp.v1.ShareChannelToGroupResponse
	8,  // 68: lp.v1.LearningPlatform.IsChannelCreator:output_type -> lp.v1.IsChannelCreatorResponse
	6,  // 69: lp.v1.LearningPlatform.GetLearningGroupsShareWithChannel:output_type -> lp.v1.GetLearningGroupsShareWithChannelResponse
	47, // 70: lp.v1.LearningPlatform.CreatePlan:output_type -> lp.v1.CreatePlanResponse
	49, // 71: lp.v1.LearningPlatform.GetPlan:output_type -> lp.v1.GetPlanResponse
	51, // 72: lp.v1.LearningPlatform.GetPlans:output_type -> lp.v1.GetPlansResponse
	53, // 73: lp.v1.LearningPlatform.UpdatePlan:output_type -> lp.v1.UpdatePlanResponse
	55, // 74: lp.v1.LearningPlatform.DeletePlan:output_type -> lp.v1.DeletePlanResponse
	57, // 75: lp.v1.LearningPlatform.SharePlanWithUsers:output_type -> lp.v1.SharePlanWithUsersResponse
	4,  // 76: lp.v1.LearningPlatform.IsUserShareWithPlan:output_type -> lp.v1.IsUserShareWithPlanResponse
	60, // 77: lp.v1.LearningPlatform.CreateLesson:output_type -> lp.v1.CreateLessonResponse
	62, // 78: lp.v1.LearningPlatform.GetLesson:output_type -> lp.v1.GetLessonResponse
	64, // 79: lp.v1.LearningPlatform.GetLessons:output_type -> lp.v1.GetLessonsResponse
	66, // 80: lp.v1.LearningPlatform.UpdateLesson:output_type -> lp.v1.UpdateLessonResponse
	68, // 81: lp.v1.LearningPlatform.DeleteLesson:output_type -> lp.v1.DeleteLessonResponse
	22, // 82: lp.v1.LearningPlatform.CreatePage:output_type -> lp.v1.CreatePageResponse
	24, // 83: lp.v1.LearningPlatform.GetPage:output_type -> lp.v1.GetPageResponse
	26, // 84: lp.v1.LearningPlatform.GetPages:output_type -> lp.v1.GetPagesResponse
	28, // 85: lp.v1.LearningPlatform.UpdatePage:output_type -> lp.v1.UpdatePageResponse
	30, // 86: lp.v1.LearningPlatform.DeletePage:output_type -> lp.v1.DeletePageResponse
	71, // 87: lp.v1.LearningPlatform.CreateQuestionPage:output_type -> lp.v1.CreateQuestionPageResponse
	73, // 88: lp.v1.LearningPlatform.GetQuestionPage:output_type -> lp.v1.GetQuestionPageResponse
	75, // 89: lp.v1.LearningPlatform.UpdateQuestionPage:output_type -> lp.v1.UpdateQuestionPageResponse
	77, // 90: lp.v1.LearningPlatform.CreateAttempt:output_type -> lp.v1.CreateAttemptResponse
	62, // [62:91] is the sub-list for method output_type
	33, // [33:62] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_lp_proto_init() }
func file_lp_proto_init() {
	if File_lp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lp_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IsUserShareWithPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IsUserShareWithPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetLearningGroupsShareWithChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetLearningGroupsShareWithChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IsChannelCreatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*IsChannelCreatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BasePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBasePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBasePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ImagePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateImagePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateImagePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VideoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVideoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVideoPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PDFPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePDFPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePDFPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelWithPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ShareChannelToGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ShareChannelToGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*SharePlanWithUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SharePlanWithUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*Lesson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLessonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*GetLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*GetLessonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*GetLessonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*GetLessonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLessonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteLessonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteLessonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*QuestionPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lp_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lp_proto_msgTypes[18].OneofWrappers = []any{
		(*CreatePageRequest_ImagePage)(nil),
		(*CreatePageRequest_VideoPage)(nil),
		(*CreatePageRequest_PdfPage)(nil),
	}
	file_lp_proto_msgTypes[21].OneofWrappers = []any{
		(*GetPageResponse_ImagePage)(nil),
		(*GetPageResponse_VideoPage)(nil),
		(*GetPageResponse_PdfPage)(nil),
	}
	file_lp_proto_msgTypes[24].OneofWrappers = []any{
		(*UpdatePageRequest_ImagePage)(nil),
		(*UpdatePageRequest_VideoPage)(nil),
		(*UpdatePageRequest_PdfPage)(nil),
	}
	file_lp_proto_msgTypes[36].OneofWrappers = []any{}
	file_lp_proto_msgTypes[49].OneofWrappers = []any{}
	file_lp_proto_msgTypes[67].OneofWrappers = []any{}
	file_lp_proto_msgTypes[71].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lp_proto_goTypes,
		DependencyIndexes: file_lp_proto_depIdxs,
		EnumInfos:         file_lp_proto_enumTypes,
		MessageInfos:      file_lp_proto_msgTypes,
	}.Build()
	File_lp_proto = out.File
	file_lp_proto_rawDesc = nil
	file_lp_proto_goTypes = nil
	file_lp_proto_depIdxs = nil
}
